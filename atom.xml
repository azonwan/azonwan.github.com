<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>做一个行动派</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://azonwan.github.io/"/>
  <updated>2017-08-07T08:27:13.000Z</updated>
  <id>http://azonwan.github.io/</id>
  
  <author>
    <name>azonwan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为什么创建萍聚萍汇</title>
    <link href="http://azonwan.github.io/2017-08-07-2015-12-20-why_create_pingju.md"/>
    <id>http://azonwan.github.io/2017-08-07-2015-12-20-why_create_pingju.md</id>
    <published>2017-08-07T08:27:13.000Z</published>
    <updated>2017-08-07T08:27:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>时间来到了2015年的末尾。<br>年终岁尾，我们有太多的事情需要总结，又有太多的计划需要制定。无论是对企业还是对个人而言，都是一个繁忙的时候。<br>回头看看这即将过去的一年，我感到身心特别疲惫，对生活产生了一种深深的绝望。这一年里，我遭遇了很多事情，经历着人生中巨大的困境。内心饱受煎熬的同时，我甚至也丝毫找寻不到能够帮助我走出困境的希望。很多个夜深人静的时候，我在不停的问自己，应该怎么办，难道就只能任由这种状态持续下去么？<br>在今年的十月份，我的母亲突发脑出血住进了医院，昏迷了整整两个月。这两个月的时间里，我们这些家人在担惊受怕的同时也经历着心理上的煎熬。尤其是我，因为这些年来一直在外地工作，平时陪在父母身边的时间几乎是没有的。即使母亲住院抢救的这段时间里，我也只是在医院里陪父亲护理了一周，然后就匆匆赶回北京继续上班去了。在上班的路上，我就在想，工作和家人之间到底哪个更重要，又或者说工作和生活之间，我更应该倾向于哪一方。这个想法一旦出现就变的难以磨灭，甚至在我工作的过程中，我也仍然不能完全摆脱它。母亲倒下的很突然，前一分钟我们还在聊天，后一分钟，她就无法行动，几个小时之后人就已经昏迷不醒。这种心灵上的冲击，我再也没有信心承受一遍，如果不是亲身经历，绝难想象出来那是一种怎样的体验。人都是很脆弱的，一辈子其实也是很短暂的，我们一定会有很多自己重视的事情，会有很多事情如果不做就一定会在未来的某一天里感到遗憾。我不禁在想，如果哪一天里，我也突然倒下来，我会怎么样，我是不是还能坦然面对自己所活过的这段生命。<br>这些年来，我很难把正在做的工作与生活等同起来，可能是因为当前的这份工作并不能真正的让我开心起来。曾经一度，成为一名技术专家正是我的追求。在我毕业之后，我就投入到了互联网开发这个世界，光荣的成为了一名技术开发人员。技术推动社会，是这个时代里被喊的最响亮的一句口号，仿佛做了技术就会成为这个时代进步的推动者之一。但是在我真正走进了这个领域，我发现现实果然是骨感的。真正的开发世界里，弥漫的是一片混乱。大多数情况下，大家都是被功能推着走，我们更多的时候充当的都是救火队员的角色，做的更多的事情都是临时性的解决一些设计上的缺陷和bug。这种种状况，纵使有很多原因，但却并不是不可改变的，归根结底其实就是管理方面做得不够到位。奇怪的是，这已经变成了行业里的普遍现象，大家一边对互联网高谈阔论，一边对管理推崇备至，但是却并不在工作中真正的去推动它。互联网管理，是我所接触到的管理方法中最为系统化，高效合理的一种管理体系。经过近二十几年的飞速发展，互联网领域里出现了项目管理，敏捷开发等多种管理理念，衍生出了项目经理，产品经理，技术经理诸多职位，甚至还有众多的管理工具随之产生。这本应是管理最为高效有序的一个行业，我甚至特别希望将互联网中的这些管理理念平移到生活中的方方面面中去。它是最有希望让我们变的开心的一个途径。但是在我所接触到的世界里，这样的场景仍然只是一个较为理想的愿望。那么，我就希望我能成为这条道路上的一个推动者，我无法接受自己的工作变的无序烦躁，我追求的始终都是一种开心快乐的工作氛围。带着这样的想法，我已经准备了多年，那种对混乱工作状态的烦躁，在今年下半年终于快要达到我所能承受的极限。<br>今年里，我结识了一位特别优秀的小姑娘。她是一家创业公司的高管，人漂亮，有理想，积极向上又热心乐观。我其实很喜欢她，曾经一度甚至以为她就是我的幸福。虽然最终我们仍然没有能够走到一起，但我还是特别感激她。她本是学音乐出身，毕业时在众多选择中最终加入了一家互联网创业公司。两年时间，从一个互联网的外行走到了公司高管的位置，而公司也在高速发展的轨道上大步向前。在我与她的接触中，我很容易就能感受到她对于工作的热爱和执着。虽然在很多事情的处理上，在我这种工作多年的内行中看来不并够专业，但是她的努力却给我留下了极为深刻的印象。她常常跟我说，在她的圈子里，如果自己不努力就没人会搭理你。可能她自己不知道，这句话其实也深深打动了我。相比她而言，这些年来，我的发展就过于缓慢了。我很早就已经参加了工作，摸爬滚打多年却始终在事业上不温不火。可能我缺少的就是这样的一种努力。一直以来，我都有着自己坚定的追求，但是我却始终在准备，我希望自己能够沉稳的走下去，不要贪功冒进，始终没能下定决心去真正实施它。但是也正是这种心态，很多机会就在这种等待中悄然消逝了。也许，我也可以边展开边准备。<br>亲情，爱情，事业，人生中最重要的三大方面，在今年方佛约好了似的一起给我出了难题。像是三座大山一样，压的我快要支撑不下去了。我特别希望能够改变这种状况。所以，我搭建了萍聚萍汇这样的一个社区网站。我希望能够通过这个途径，让我能够分享自己在管理方面的想法和思考，能够帮助那些同样饱受工作或是生活困扰的朋友们找到解决问题的途径，也希望能够通过大家的帮助让我走出困境。<br>萍聚萍汇这个产品，主要是给大家提供一个交流讨论管理思想和方法的平台。但是我并不希望这只是一个发泄心中不满的渠道，更希望能把它打造成一个可以帮助大家解决问题，可以推动高效科学的管理方法在工作中，生活中被合理应用的平台。<br>要想做到这一点，就需要大家共同的努力。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间来到了2015年的末尾。&lt;br&gt;年终岁尾，我们有太多的事情需要总结，又有太多的计划需要制定。无论是对企业还是对个人而言，都是一个繁忙的时候。&lt;br&gt;回头看看这即将过去的一年，我感到身心特别疲惫，对生活产生了一种深深的绝望。这一年里，我遭遇了很多事情，经历着人生中巨大的困
    
    </summary>
    
      <category term="计划实施" scheme="http://azonwan.github.io/categories/%E8%AE%A1%E5%88%92%E5%AE%9E%E6%96%BD/"/>
    
    
      <category term="萍聚萍汇" scheme="http://azonwan.github.io/tags/%E8%90%8D%E8%81%9A%E8%90%8D%E6%B1%87/"/>
    
  </entry>
  
  <entry>
    <title>建站计划</title>
    <link href="http://azonwan.github.io/2017-08-07-2015-12-20-plan-to-pingju.md"/>
    <id>http://azonwan.github.io/2017-08-07-2015-12-20-plan-to-pingju.md</id>
    <published>2017-08-07T07:31:49.000Z</published>
    <updated>2017-08-07T07:31:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>到目前为止，萍聚萍汇这个社区应用已经算是结束了第一阶段的建设。<br>在我的设想中，萍聚萍汇的发展轨迹差不多是这样的。<br>第一阶段，开发完成社区的基本功能，进行上线运营。<br>第二阶段，主要是进行内容的运营。我会搜集整理有关管理的知识，也会整理自己的想法观点，在这个平台中进行分享。在这个阶段里，我也会搜集反馈回来的建议和bug，进行开发修复。保证站点能够良好的运行。<br>第三阶段，我会开始尝试着进行一些推广，让更多的人知道它并愿意使用它，让大家也能参与进来。<br>第四阶段，我会通过用户反馈，结合收集到的诸多的先进管理理念和方法，将它们运用起来开发一些有特色的功能。  </p>
<p>对于萍聚萍汇这个产品来说，按照我的设想，它并不只是一个供大家交流讨论的社区应用，它更多的应该是能够促进大家高效管理，快乐工作，改变自己，走向成功的一个工具。    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;到目前为止，萍聚萍汇这个社区应用已经算是结束了第一阶段的建设。&lt;br&gt;在我的设想中，萍聚萍汇的发展轨迹差不多是这样的。&lt;br&gt;第一阶段，开发完成社区的基本功能，进行上线运营。&lt;br&gt;第二阶段，主要是进行内容的运营。我会搜集整理有关管理的知识，也会整理自己的想法观点，在这个平
    
    </summary>
    
      <category term="计划实施" scheme="http://azonwan.github.io/categories/%E8%AE%A1%E5%88%92%E5%AE%9E%E6%96%BD/"/>
    
    
      <category term="萍聚萍汇" scheme="http://azonwan.github.io/tags/%E8%90%8D%E8%81%9A%E8%90%8D%E6%B1%87/"/>
    
  </entry>
  
  <entry>
    <title>php发展历程</title>
    <link href="http://azonwan.github.io/2017-08-02-2015-09-17-php-history.md"/>
    <id>http://azonwan.github.io/2017-08-02-2015-09-17-php-history.md</id>
    <published>2017-08-02T09:32:48.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>关注PHP技术的朋友应该都会了解到，前几天（2015年09月05日），<a href="http://www.oschina.net/news/65884/php-7-0-0-rc2" target="_blank" rel="external">PHP 7.0.0 RC 2版本发布</a>。该版本号称针对以往版本有了很大的性能提升，差不多是PHP 5.3～5.6的2～5倍，同时占用内存更少。</p>
<p>一直以来，关于PHP是不是最好的开发语言这一问题，在网上已经被争论了无数次。虽然很大程度上带有调侃的性质，但是同时也能反映出来，在Web开发界，PHP的确是关注度极高的一门语言。PHP饱受诟病的性能问题，在新版本推出之后，终于给出了一个有利的反击。</p>
<p>从94年，PHP雏形的出现，发展至今，PHP已经陆续推出了6个大的版本。第七版预计今年年底的时候会正式发布。我相信很多开发人员同我一样，是从PHP 5.3版本的时候开始接触这门语言的。作为一个使用了PHP多年的开发者，我其实并没有刻意去关注PHP每个版本的特性和改进。在看到7.0版本发布的消息之时，我突然很想回顾一下它以往的发展历程。从网上找了一些相关的资料，在这里，进行一个简单的汇总。</p>
<p>主要参考的资料有：<br><a href="https://line.do/ww/history-of-php/r5q4x1/vertical" target="_blank" rel="external">History of PHP</a><br><a href="http://baike.baidu.com/subview/99/5828265.htm?fromtitle=%40%23Protect%40%23" target="_blank" rel="external">百度百科</a></p>
<p>1.雏形<br>PHP最初是作为一个快速、实用的工具包出现的。1994年，为了在自己的网站上增加一个小巧而实用的访客追踪系统，Rasmus Lerdorf编写了PHP的雏形程序。这是一个用Perl封装的简单工具。由于使用效果并不理想，Rasmus又用C语言重写了这个工具。   </p>
<p>后来，更多的人注意到这个轻巧而简便的程序，并且要求增加更多的功能。Rasmus决定发布一个完整的版本，将其命名为Personal Home Page Tools，也就是个人网页工具。</p>
<p>后来，Rasmus又发布了一个名为FI的可以做SQL查询的工具。 </p>
<p>2.第一版<br>在1995年8月，Rasmus Lerdorf发布了PHP的第一个版本。允许开发者关注它，使用它，并且鼓励全世界的开发者参与它的开发和维护中来。</p>
<p>3.第二版<br>1996年Rasmus发布了PHP/FI2.0，这是一个基本完善的PHP程序包。它不仅可以访问数据库，而且可以嵌入HTML页面。此时，PHP/FI2.0 以及吸引了大量的程序开发人员。在众多程序员之中，也包括了Zeev Suraski和Andi Gutmans，他们就是后来PHP3的始作者。由于不满足于PHP/FI在大型项目中的表现，Zeev和Andi作了重大的改进。 </p>
<p>4.第三版<br>1998年末，PHP3的第一个官方正式版本发行，其特色是具有更好的执行效果以及更清晰的结构。除此之外，PHP3的强大的功能还在于它的可扩展性。除了给最终用户提供数据库、协议和API的基础结构，它的可扩展性吸引了大量的开发人员加入并提交新的模块。   </p>
<p>这个全新的语言伴随着一个新的名称发布。这个名称更具广泛意义，而不仅局限于“个人主页工具”的概念。它被命名为简单的缩写“PHP”。这是一种递归的缩写，它的全称是——PHP：Hypertext Preprocessor(超文本预处理器)。   </p>
<p>不久，Zeev Suraski和Andi Gutmans投入到了全新的PHP的开发之中。设计目标是增强程序运行性能和PHP自身代码的模块性。   </p>
<p>5.第四版<br>新的PHP核心被成为“Zend” （以Zeev和Andi的名字命名）引擎，于2000年5月随着新版PHP4.0发布。PHP4的性能较PHP3有着显著的提高。相同的脚本在PHP4中运行，最高可以有近10倍的性能提升。并且Zend提供了的脚本优化器，可以把源程序转为二进制编译代码，提高性能的同时，也保护了程序源码不被暴露。   </p>
<p>在PHP4中增加了对各种Web服务器（如Apache、IIS/PWS及OmniHTTPd 等）的支持。此外，PHP4还增加了一些新的语言特性，如丰富的数组操作函数、完整的会话机制、对输出缓存的支持等。PHP4也对一些跨平台的技术提供了扩展支持，如对Adobe PDF、SWF、Java、Microsoft.NET等技术的支持。    </p>
<p>PHP4还增加了对类于对象的支持。尽管PHP4在这方面并不完善，但还是大大改善了对面向对象程序设计的支持。PHP4中的Pear库（PHP Extension and Application Repository）就是面向对象的应用与实践的最好例证。     </p>
<p>6.第五版<br>尽管PHP4的发展迅猛，但较之于其他流行的开发语言还是缺乏一些关键的功能特性，比如，PHP4中的面向对象功能并不完善，也无法实现异常（Exception）的捕捉与处理。因此在一些特殊问题的处理上还是捉襟见肘的。  </p>
<p>2004年7月，PHP5正式版本的发布，标志着一个全新的PHP时代的到来。PHP作为如今主流网络开发语言，广为普及，主要要归功于PHP5的发布。它的核心是第二代Zend引擎，并引入了对全新的PECL模块的支持。PHP5的最大特点是引入了面向对象的全部机制，并且保留了向下的兼容性。程序员不必再编写缺乏功能性的类，并且能够以多种方法实现类的保护。另外，在对象的集成等方面也不再存在问题。使用PHP5引进了类型提示和异常处理机制，能更有效的处理和避免错误的发生。  </p>
<p>PHP5在更新发展的同时，还保留了对旧有版本的支持。保证用PHP4写出来的代码仍然可以正常运行。随着MySQL数据库的发展，PHP5还绑定了新的MySQLi扩展模块，它提供了一些更加有效的方法和实用工具用于处理数据库操作。这些方法大都以面向对象的方式实现，同时也极大地提高了基于数据库的Web项目的执行速度。  </p>
<p>另外，PHP5中还改进了创建动态图片的功能，能够支持多种图片格式（如PNG、GIF、TTIF、JPGE等）。PHP5以及内置了对GD2库的支持，因此安装GD2库（主要指UNIX系统中）也不再是件难事，这使得处理图像十分简单和高效。   </p>
<p>直至现在，市面上应用最广泛的版本仍然还是PHP5.活跃的社区支持，多种开源框架如雨后春笋般的出现以及广泛传播,这些都为PHP的发展起到了巨大的推进作用。但是，早期的PHP开发，虽然传播的很广泛，应用到它的项目很多，成功的案例同样也有很多，最著名的当属Facebook了。可是我们的确不能忽略它为人所诟病的种种不好的地方，比如性能低下，比如缺乏行业标准和代码规范，比如没有包管理工具…不管我们称不承认，这些缺陷如果不得到改进，PHP的发展必将会收到极大的限制。所以社区里经常会传出PHP即将死亡的论断。不过这种状况在<a href="http://www.phpcomposer.com/" target="_blank" rel="external">Composer</a>推出之后，得到了极大的改善。Composer的出现，推动了<a href="http://www.golaravel.com/" target="_blank" rel="external">Lavarel</a>这一PHP框架正向着最受欢迎框架极速靠近。接着，PHP社区终于推出了自己的推荐<a href="http://www.php-fig.org" target="_blank" rel="external">规范</a>。PHP的发展终于迎来了一个爆发的时刻。</p>
<p>7.第六版<br>2007年在巴黎举行的PHP开发者大会中，PHP6开发的消息开始流传开来。于PHP大会讨论的PHP6将有很大幅度的变化，但这只是草案阶段，并不代表所有会议的记录都会随着PHP6的揭晓而包含在变更中。<br>在这次大会中，PHP6将会具有如下的特性。   </p>
<ul>
<li>支持Unicode</li>
<li>Register Globals 将被移除</li>
<li>Magic Quotes 将取消</li>
<li>Safe Mode 取消</li>
<li>var 别名为 public</li>
<li>通过引用返回将出错</li>
<li>zend.ze1 compatbility mode 将被移去</li>
<li>Freetype 1 and GD 1 support 将不见</li>
<li>dl() 被移到 SAPI 中</li>
<li>Register Long Array 去除</li>
<li>一些Extension的变更</li>
<li>APC将被导入核心</li>
<li>告别ASP风格的起始标签</li>
</ul>
<p>虽然在07年的时候就已经开始为PHP6的发布做了准备，但是时至今日(2015年9月)，PHP6仍然未能正式发行。对于其迟迟不能发布的原因，网上流传的可能性大致有以下几个：   </p>
<ul>
<li>开发小组认为，如果不能完全解决Unicode就不能称之为php6</li>
<li>当初提出开发php6的草案有点操之过急，需要解决的问题超出当时想像</li>
<li>开发成员并未对php6展现出100%的热情，从另一个方面来说，解决Unicode并非是当前最重要的事情</li>
<li>除了unicode，当初提出的草案要点在现在的php5中基本实现，可以说php5.4或php5.5就可称之为php6</li>
</ul>
<p>2015年6月11日，PHP官网发布消息，正式公开发布PHP7第一版的alpha版本.由此可见，PHP6很有可能会成为一个不会被发布的版本。</p>
<p>8.第七版<br>现在官方发布最新版本是php5.6而php6也还在开发当中，但基于php7的讨论也开始在网上流传开来了。   </p>
<p>在PHP7.0.0Alpha 1中，使用了新版的ZendEngine引擎，带来了很多新的特性。    </p>
<ul>
<li>性能提升：PHP7比PHP5.6性能提升了两倍</li>
<li>全面一致的64位支持</li>
<li>以前的许多致命错误，现在改成抛出异常</li>
<li>移除了一些老的不再支持的SAPI（服务器端应用编程端口）和扩展</li>
<li>新增了空接合操作符</li>
<li>新增加了结合比较运算符</li>
<li>新增加了函数的返回类型声明</li>
<li>新增加了标量类型声明</li>
<li>新增加匿名类</li>
</ul>
<p>目前，PHP7.0.0 Beta2版本已经发布了。预计在2015年11月12日，PHP7的最终版会正式发布。</p>
<p>9.HHVM<br>提到PHP进化史，除了从PHP1到PHP7之外，还有一个版本也很有必要提及，它就是HHVM.</p>
<p>大家都知道，Facebook主要就是用PHP开发出来的。但是在它逐步成为世界上最大的社交网站的时候，PHP效率低下的问题也慢慢被放大到无法忍受的地步了。为了解决这个瓶颈，Facebook花了大力气，进行了多方尝试。其中，最有成效的方法就是推出了HHVM。</p>
<p>HHVM (HipHop Virtual Machine)会将PHP代码转换成高级别的字节码（通常称为中间语言）。然后在运行时通过即时（JIT）编译器将这些字节码转换为x64的机器码。在这些方面，HHVM十分类似与C#的CLR和Java的JVM。</p>
<p>其实通俗一点说，HHVM就是专门用来支持PHP运行的虚拟机。相比较原本用ZendEngine来运行的PHP，它的效率提升的时分明显，几乎跟PHP7的效率差不多。但是它也有自身的缺陷，限制了它最终的推广应用。</p>
<p>HHVM的出现，主要原因是Facebook为了解决PHP性能低下的状况而做出的努力。它的定位本不是为了促进PHP的发展。所以它的很多优化只针对Facebook需要用到的地方，而不是针对整个PHP这门语言。这就造成了一种结果，它对PHP原本的很多方法可能并不会完全兼容。最明显的情况，如果我们需要使用PHP的一些扩展，如果是在HHVM中，我们就不得不重写这些在ZendEngine中已有的扩展了。</p>
<p>虽然HHVM的局限性很多，但是它对PHP性能的提升却是有目共睹的。未来的发展到底会怎样，会不会和PHP7齐头并进，就让我们拭目以待吧。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关注PHP技术的朋友应该都会了解到，前几天（2015年09月05日），&lt;a href=&quot;http://www.oschina.net/news/65884/php-7-0-0-rc2&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;PHP 7.0.0 RC 
    
    </summary>
    
      <category term="技术积累" scheme="http://azonwan.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="php web" scheme="http://azonwan.github.io/tags/php-web/"/>
    
  </entry>
  
  <entry>
    <title>php开发的等级划分</title>
    <link href="http://azonwan.github.io/2017-08-02-2015-09-20-phper-level.md"/>
    <id>http://azonwan.github.io/2017-08-02-2015-09-20-phper-level.md</id>
    <published>2017-08-02T09:32:48.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于一个技术从业人员，不管是我们自己还是周边的朋友同事，往往都会很关心一个问题，就是自己在这个领域里到底是出于一个什么样的位置。这关系着我们的薪资水平，能力地位，责任大小…总之，它就是就是我们被认可的一种体现。  </p>
<p>最近网上开始流传着这样的<a href="http://www.devstore.cn/new/newInfo/1172.html" target="_blank" rel="external">一篇文章</a>,它比较系统的介绍了当下中国最火热的BAT公司，技术人员的级别以及对应的薪酬待遇。看过之后，让我们对BAT员工的薪资待遇又羡又妒的同时，也开始思考自己到底会处在对应的那个级别下。     </p>
<p>从中我们可以看出，BAT公司都针对技术员工出台了专门的评级标准，阿里的叫P序列，百度和腾讯的都被称呼为T序列。不管他们各自的名字叫什么，其实最终的目的都是一样的，就是让大家能够在技术通道里找到自己的定位。这个位置不光是自己企业适用，拿到其它企业也同样是适用的。虽然它出台的主要目的是为了区别于管理岗位，让那些有志于在技术领域中专心发展，不适合转做管理也不喜欢做管理的程序员们，有一个更好更清晰的晋级规划。但是我们仍然还是习惯于主管，经理，总监这样的称谓。从阿里的级别对照表中，我们还是能够看出来两种职级晋升通道中的对应关系。<br><img src="/album/tech/ali_level.jpg" alt=""></p>
<p>要想知道自己的能力到底处于这个通道中的哪个位置，我们首先需要明确这些位置所对应的要求，以及对应的职责范畴。在BAT内部，每次的职级晋升都会有专人审查，现场打分。但是我们这些处于BAT之外的程序员们，有什么好办法能够明确自己的位置呢。有一阵子，我特别希望能够找到一个可见的能力要求对照表，但是最终也没有找到。</p>
<p>现在我工作的时间久了,在的PHP程序员领域里混迹多年，终于升级成了技术经理。虽然这个职称根本说明不了任何问题，但是刚获得这个title的时候，心里还是很开心的。开心过后，我开始想，技术经理有别于纯粹的程序员，要有哪些区别呢。找到一个技能与职位的简单对照，这份心思又再一次生出了。但还是一样，没有找到特别有价值的信息。在闲下来的时候，我开始想着自己来总结总结。</p>
<p>在早些时候，纯技术人员的发展是很有限的。当他在一个领域里面做到了一定的程度，有着多年的开发经验的时候，往往就要面临着转型的问题。这个问题对于技术人员而言，是一个十分痛苦的抉择。要么转型做管理，要么继续搞开发。为什么一定要转型呢，原因在于技术岗位已经没有了晋升的空间,想要有进一步的发展，获得职业上的进步，就必须要往管理上考虑了。但是有些人可能不适合也不喜欢转做管理，他还是喜欢在技术领域里多专研多探索。此外，一个公司的管理岗位毕竟有限，也无法满足那么多人的转型需求。要是这样，努力提升自己，走向架构师可能就是他唯一的发展方向了。</p>
<p>所以很多人都在感叹，程序员也是一份青春饭，年轻的时候做几年，拼搏一下还好，等到三十多岁的时候，如果还不能转型成功，可能也就不会再有什么太大的发展了。很多公司已经认识到了这一现象，尤其是一些大型公司，已经针对其作出了很好的努力和表率，比如上述所提到的BAT。他们专门为技术开发人员设计了职业发展通道，让那些始终有志于技术的同事们能够一直拥有着前进的动力。     </p>
<p>好了，回到正题上来。经过以上这么多铺垫，我们可以知道，对于一个技术人员来说，可以有两种晋升模式。一种是纯技术路线，一种是技术管理路线。纯技术路线里，虽然每个公司的叫法和级别分类不尽相同，但是总体说来，都可以简单的用初级，中级，高级程序员来概括。在技术管理路线里，可以分为主管，经理，总监。</p>
<h2 id="纯技术人员"><a href="#纯技术人员" class="headerlink" title="纯技术人员"></a>纯技术人员</h2><p>上文提到过，我一直希望能够找到一篇文章，可以具体描述和讲解程序员在对应阶段下所需要掌握的技能和要求。找来找去，始终无法找到特别全面的，所以就萌生了自己总结的想法。刚好，今天在网上，发现了这样的<a href="http://www.imooc.com/wap/article?article_id=1502" target="_blank" rel="external">一篇文章</a>.里面讲述的内容，大部分都与我心中所想默契相合，这里也会稍微借鉴下的。   </p>
<p>因为我是一名多年的PHP程序员，以下内容都是以PHP这门开发语言为基础的。</p>
<h3 id="初级程序员"><a href="#初级程序员" class="headerlink" title="初级程序员"></a>初级程序员</h3><p>这个阶段的程序员大多没有什么工作经验，主要的任务就是在资深员工的带领下，把分配在手的事情做完做好。  </p>
<p>需要达到的要求是，可以正确理解归纳出产品的真正需求，应用开发语言熟练开发，能够在项目出现问题的时候，根据现象查找出问题出现的原因并加以解决。   </p>
<p>下面，具体的分解一下。</p>
<ol>
<li>PHP基本知识<br>了解PHP支持的数据结构，掌握基本语法，方法，类的使用，了解并可以运用面向对象的相关知识。还要熟练应用PHP内置的常用方法，比如字符串，数组，时间等相关的函数。</li>
<li>PHP框架<br>明确MVC架构。<br>掌握两到三门常用框架，比如ThinkPHP,CakePHP,Yii,Laravel，可以不清楚其中原理，但是需要能够熟练应用。    </li>
<li>PHP扩展<br>要能够根据需求，自己成功安装相应的PHP扩展。   </li>
<li>Mysql<br>知道mysql的常用存储引擎，并了解其中的特点和区别。<br>能够熟练书写SQL语句。<br>要能够熟练应用索引。   </li>
<li>Nginx<br>能够独立安装搭建并运行Nginx+Php环境。<br>能够知道Nginx配置中常用参数的意义，并可以根据实际需求进行修改使用。   </li>
<li>其他<br>需要对Form，File，Session，Cookie这些HTTP中需要天天见的内容有一个深入的理解。<br>需要掌握简单的前端知识，比如Div＋Css，Javascript，虽然我们做PHP的主要偏向于后端数据，但是大家仍然不可避免要以前端页面为载体，这就要求我们对前端的知识，可以不精通，但是必须要懂。  </li>
</ol>
<h3 id="中级程序员"><a href="#中级程序员" class="headerlink" title="中级程序员"></a>中级程序员</h3><p>在初级程序员阶段，经过大量的开发实践过后，我们终于成功的来到了中级程序员这个领域。在这个阶段，大家已经不能只满足于在别人的带领下进行程序开发，因为这个时候，我们就已经是资深程序员，我们已经要能够独立的进行项目开发了。    </p>
<p>这时候，我们的要求已经变成了，能够自行与相关部门对接，自行进行需求分析，任务分解，排期安排，带领着几个小伙伴开始有条不紊的进行着功能开发。    </p>
<p>对应到具体的技术能力上，我们需要达到怎样的要求呢。   </p>
<ol>
<li>PHP<br>除了第一阶段的能力，安装配置方面能够随意安装PHP和各种第三方扩展的编译安装配置；<br>了解php-fpm的大部分配置选项和含义（如max_requests/max_children/request_terminate_timeout之类的影响性能的配置），知道mod<em>php/fastcgi的区别</em>；<br>在PHP方面已经能够熟练各种基础技术，还包括各种深入些的PHP，包括对PHP面向对象的深入理解/SPL/语法层面的特殊特性比如反射之类的；<br>在框架方面已经阅读过最少一个以上常规PHP MVC框架的代码了，知道基本PHP框架内部实现机制和设计思想；<br>在PHP开发中已经能够熟练使用常规的设计模式来应用开发（抽象工厂/单例/观察者/命令链/策略/适配器 等模式）；建议开发自己的PHP MVC框架来充分让开发自由化，让自己深入理解MVC模式，也让自己能够在业务项目开发里快速升级；<br>熟悉PHP的各种代码优化方法，熟悉大部分PHP安全方面问题的解决处理；<br>熟悉基本的PHP执行的机制原理（Zend引擎/扩展基本工作机制）；   </li>
<li>数据库<br>在MySQL开发方面，掌握很多小技巧，包括常规SQL优化（group by/order by/rand优化等）；<br>除了能够搭建MySQL，还能够冷热备份MySQL数据，还知道影响innodb/myisam性能的配置选项（比如key_buffer/query_cache/sort_buffer/innodb_buffer_pool_size/innodb_flush_log_at_trx<em>commit等</em>），也知道这些选项配置成为多少值合适；<br>另外也了解一些特殊的配置选项，比如知道如何搭建mysql主从同步的环境，知道各个binlog_format的区别；<br>知道MySQL的性能追查，包括slow_log/explain等，还能够知道基本的索引建立处理等知识；<br>原理方面：了解基本的MySQL的架构（Server+存储引擎），知道基本的InnoDB/MyISAM索引存储结构和不同（聚簇索引，B树）；知道基本的InnoDB事务处理机制；了解大部分MySQL异常情况的处理方案（或者知道哪儿找到处理方案）。<br>了解一下NoSQL数据库，如MongoDB，Redis，顺便对比跟MySQL的差别，同时能够在合适的应用场景安全谨慎的使用MongoDB和Redis。   </li>
<li>Nginx<br>了解复杂一些的Nginx配置；包括多核配置、events、proxypass，sendfile/tcp配置，知道超时等相关配置和性能影响<br>知道nginx除了web server，还能够承担代理服务器、反向静态服务器等配置；<br>知道基本的nginx配置调优，如何配置权限、编译一个nginx扩展到nginx；<br>知道基本的nginx运行原理（master/worker机制，epoll），以及为什么nginx性能比apache性能好等知识；   </li>
<li>前端<br>熟悉基本的HTTP协议（协议代码200/300/400/500，基本的HTTP交互头）<br>可以在深入写出稍微优雅的HTML+CSS+JavaScript，或者能够大致简单使用某些前端框架（jQuery/YUI/ExtJS/RequireJS/BootStrap之类）<br>可以深入学习JavaScript编程，比如闭包机制、DOM处理；再深入些可以读读jQuery源码做深入学习   </li>
<li>系统设计<br>能够设计大部分中型系统的网站架构、数据库、基本PHP框架选型，性能测试排查处理等；<br>能够完成类似：浏览器 -&gt; CDN(Squid) -&gt; Nginx+PHP -&gt; 缓存 -&gt; 数据库 结构网站的基本设计开发维护；<br>能够支撑每天数百万到千万流量基本网站的开发维护工作；   </li>
</ol>
<h3 id="高级程序员"><a href="#高级程序员" class="headerlink" title="高级程序员"></a>高级程序员</h3><p>成为高级程序员，本应该是每一个踏入编程领域的程序员的梦想。因为它已经在一定程度上承认了我们的能力和价值。但是在现在这个行业背景下，高级程序员俨然已经成为了一种称呼，随手抓一把简历，可能百分之九十都是高级程序员。<br>到底达到怎样的标准才能算是高级程序员呢？   </p>
<p>在这个阶段下，我们已经可以称得上是这一领域下的专家，绝大部分的问题在我们面前都将不再成为阻碍。我们除了能够完成基本的PHP业务开发，还能够解决大部分深入复杂的技术问题，并且可以独立设计完成中大型的系统设计和开发工作；自己能够独立深入某个技术方向，在这个方向上做到比别人专业。<br>此时，大家的职责已不再是亲自进行代码开发，程序调试，而应该转变成带领着团队，保证整个团队能够高效率高质量的完成开发任务。<br>要能够根据项目需求，从众多的可行方案中选择最优化的一个，能够制定提高开发效率保证质量的程序架构，能够透过需求的表象看到本质，能够引进科学合理的开发流程保证项目展开，这些无法量化但是却无比重要的能力成为了我们工作中的重点。<br>如果要达到这样的程度，我们又需要在具体的领域里有着怎样的要求呢？   </p>
<ol>
<li>PHP<br>对大部分的PHP框架能够迅速在一天内上手使用，并且了解各个主流PHP框架的优缺点，能够迅速方便项目开发中做技术选型；<br>在配置方面，除了常规第二阶段会的知识，会了解一些比较偏门的配置选项（php auto_prepend_file/auto_append_file），包括扩展中的一些复杂高级配置和原理（比如memcached扩展配置中的memcache.hash_strategy、apc扩展配置中的apc.mmap_file_mask/apc.slam_defense/apc.file_update_protection之类的）；<br>对php的工作机制比较了解，包括php-fpm工作机制（比如php-fpm在不同配置机器下面开启进程数量计算以及原理），对zend引擎有基本熟悉（vm/gc/stream处理），阅读过基本的PHP内核源码（或者阅读过相关文章），对PHP内部机制的大部分核心数据结构（基础类型/Array/Object）实现有了解，对于核心基础结构（zval/hashtable/gc）有深入学习了解；<br>能够进行基本的PHP扩展开发，了解一些扩展开发的中高级知识（minit/rinit等），熟悉php跟apache/nginx不同的通信交互方式细节（mod<em>php/fastcgi）</em>；<br>除了开发PHP扩展，可以考虑学习开发Zend扩展，从更底层去了解PHP。   </li>
<li>数据库<br>在第二阶段的基础上面，在MySQL应用方面，除了之前的基本SQL优化，还能够在完成一些复杂操作，比如大批量数据的导入导出，线上大批量数据的更改表结构或者增删索引字段等等高危操作；除了安装配置，已经能够处理更多复杂的MySQL的问题，比如各种问题的追查，主从同步延迟问题的解决、跨机房同步数据方案、MySQL高可用架构等都有涉及了解；<br>对MySQL应用层面，对MySQL的核心关键技术比较熟悉，比如事务机制（隔离级别、锁等）、对触发器、分区等技术有一定了解和应用；<br>对MySQL性能方面，有包括磁盘优化（SAS迁移到SSD）、服务器优化（内存、服务器本身配置）、除了二阶段的其他核心性能优化选项（innodb_log_buffer_size/back_log/table_open_cache/thread_cache_size/innodb_lock_wait<em>timeout等</em>）、连接池软件选择应用，对show <em>（show status/show profile）</em>类的操作语句有深入了解，能够完成大部分的性能问题追查；<br>MySQL备份技术的深入熟悉，包括灾备还原、对Binlog的深入理解，冷热备份，多IDC备份等；<br>在MySQL原理方面，有更多了解，比如对MySQL的工作机制开始阅读部分源码，比如对主从同步（复制）技术的源码学习，或者对某个存储引擎（MyISAM/Innodb/TokuDB）等等的源码学习理解，如果条件允许，可以参考CSV引擎开发自己简单的存储引擎来保存一些数据，增强对MySQL的理解；在这个过程，如果自己有兴趣，也可以考虑往DBA方向发展。   </li>
<li>Nginx<br>能够把Nginx操作的很熟练，能够对Nginx进行更深入的运维工作，比如监控、性能优化，复杂问题处理等等；<br>更多方面可以考虑侧重在关于Nginx工作原理部分的深入学习，主要表现在阅读源码开始，比如具体的master/worker工作机制，Nginx内部的事件处理，内存管理等等；同时可以学习Nginx扩展的开发，可以定制一些自己私有的扩展；同时可以对Nginx+Lua有一定程度的了解，看看是否可以结合应用出更好模式<br>这个阶段的要求是对Nginx原理的深入理解，可以考虑成为Nginx方向的深入专业者   </li>
<li>系统设计<br>能够应用掌握的经验技能，设计出比较复杂的中大型系统，能够解决大部分线上的各种复杂系统的问题，完成类似 浏览器-&gt; CDN -&gt; 负载均衡 -&gt;接入层 -&gt; Nginx+PHP -&gt; 业务缓存 -&gt; 数据库 -&gt; 各路复杂后端RPC交互（存储后端、逻辑后端、反作弊后端、外部服务） -&gt; 更多后端 酱紫的复杂业务；<br>能够支撑每天数千万到数亿流量网站的正常开发维护工作   </li>
<li>其它<br>深入了解HTTP协议（包括各个细致协议特殊协议代码和背后原因，比如302静态文件缓存了，502是nginx后面php挂了之类的）<br>除了之前的前端方面的各种框架应用整合能力，前端方面的学习如果有兴趣可以更深入，表现形式是，可以自己开发一些类似jQuery的前端框架，或者开发一个富文本编辑器之类的比较琐碎考验JavaScript功力；<br>在基础的PHP/C/C++语言方面有基本积累，建议在当前阶段可以尝试学习不同的编程语言，看个人兴趣爱好，脚本类语言可以学学Python/Ruby 之类的，函数式编程语言可以试试 Lisp/Haskell/Scala/Erlang 之类的，静态语言可以试试Java/Golang，数据统计分析可以了解了解R语言，如果想换个视角做后端业务，可以试试Node.js还有前面提到的跟Nginx结合的Nginx<em>Lua等</em>。<br>学习不同的语言主要是提升自己的视野和解决问题手段的差异，比如会了解除了进程/线程，还有轻量级协程；比如在跨机器通信场景下面，Erlang的解决方案简单的惊人；比如在不想选择C/C++的情况下，还有类似高效的Erlang/Golang可用等等；主要是提升视野</li>
</ol>
<h2 id="管理路线"><a href="#管理路线" class="headerlink" title="管理路线"></a>管理路线</h2><p>上面主要讨论的纯技术路线的上升轨迹。但是在传统的意识中，管理路线中的那些职位才是我们熟悉的。别人问你现在是什么职位，你告诉他自己现在是高级工程师，估计被人并不会觉着你怎么样，但是你说我现在是技术总监，一下子就能够在对方脑海中呈现出一个清晰伟岸的形象出来。   </p>
<p>对于管理路线，在IT公司里，一般会分为经理和总监这两个职称。   </p>
<h3 id="经理"><a href="#经理" class="headerlink" title="经理"></a>经理</h3><p>在IT公司中，往往会存在着技术经理，产品经理，项目经理这几种角色。   </p>
<ol>
<li>技术经理<br>他的主要职责是组织制定各种技术标准和技术规范并保证实施，他既是精通某个领域专业的精英，又是擅长团队领导的管理者。他们参与技术方向研究和总体规划，发展新项目，并且能够带领技术团队进行项目攻关。<br>技术经理要能够制定并实施公司技术发展规划，制定各种技术标准、技术规范，设计、审核各种技术方案和文档，指导、培训、监督、考核技术队伍，提高技术部门工作效率，推动重大持续改进项目，组织、沟通协调整个项目相关的人和事。   </li>
<li>产品经理<br>这是一个企业中专门负责产品管理的职位，产品经理负责调查并根据用户的需求，确定开发何种产品，选择何种技术、商业模式等。并推动相应产品的开发组织，他还要根据产品的生命周期，协调研发、营销、运营等，确定和组织实施相应的产品策略，以及其他一系列相关的产品管理活动。<br>一般来说，产品经理是负责并保证高质量的产品按时完成和发布的专职管理人员。他的任务包括倾听用户需求；负责产品功能的定义、规划和设计；做各种复杂决策，保证团队顺利开展工作及跟踪程序错误等，总之，产品经理全权负责产品的最终完成。另外，产品经理还要认真搜集用户的新需求、竞争产品的资料，并进行需求分析、竞品分析以及研究产品的发展趋势等。   </li>
<li>项目经理<br>从职业角度上讲，项目经理是指企业建立以项目经理责任制为核心，对项目实行质量、安全、进度、成本管理的责任保证体系和全面提高项目管理水平设立的重要管理岗位。项目经理是为项目的成功策划和执行负总责的人。项目经理是项目团队的领导者，项目经理首要职责是在预算范围内按时优质地领导项目小组完成全部项目工作内容，并使客户满意。为此项目经理必须在一系列的项目计划、组织和控制活动中做好领导工作，从而实现项目目标。    <h3 id="总监"><a href="#总监" class="headerlink" title="总监"></a>总监</h3>技术总监，就是我们常说的CTO。是企业团体里的高阶主管职位之一，是企业内负责技术的最高负责人。他一般负责一个企业的技术管理体系的建设和维护，制定技术业具有深入理解，对行业技术发展趋势和管理现状具有准确的判断。<br>作为技术总监，他要制订并组织实施技术系统工作目标和工作计划，组织制订并实施技术系统规章制度和实施细则，组织技术、产品开发与创新，公司标准化、计量管理工作，定期进行技术分析和质量分析工作，制定预防和纠正措施。   </li>
</ol>
<p>至此，对于一般意义上，IT公司中的技术岗位及管理岗位的职称和对应的职责要求概述了一遍。在很多公司里，尤其是在IT公司里，这些会存在一定程度上的混乱，并不会同这里总结的完全一致。我在这里所总结的权当做是一种参考，大家若有不同意见，欢迎随时加入探讨。   </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对于一个技术从业人员，不管是我们自己还是周边的朋友同事，往往都会很关心一个问题，就是自己在这个领域里到底是出于一个什么样的位置。这关系着我们的薪资水平，能力地位，责任大小…总之，它就是就是我们被认可的一种体现。  &lt;/p&gt;
&lt;p&gt;最近网上开始流传着这样的&lt;a href=&quot;h
    
    </summary>
    
      <category term="关注兴趣" scheme="http://azonwan.github.io/categories/%E5%85%B3%E6%B3%A8%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="php 技术发展 职业规划" scheme="http://azonwan.github.io/tags/php-%E6%8A%80%E6%9C%AF%E5%8F%91%E5%B1%95-%E8%81%8C%E4%B8%9A%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>谈谈创业1</title>
    <link href="http://azonwan.github.io/2017-08-02-2015-09-23-startup-1.md"/>
    <id>http://azonwan.github.io/2017-08-02-2015-09-23-startup-1.md</id>
    <published>2017-08-02T09:32:48.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>时下，创业在中国，刮起了一股异常迅猛的风暴，而且还大有愈演愈烈的趋势。几乎每隔几天，我们就可以听到那个谁谁出去创业的消息。仿佛一下子，钱也变的越来越不值钱了，随随便便一个点子，连个产品都不需要，就能找到投资人，发布融资成功的信息。</p>
<p>很多很多人为了赶上这个史上最好的创业时代，不惜放下现在的所有，毅然决然的投身进这股创业大潮中。关于此，网络上赞扬的声音有，担忧的声音也有，各种各样的声音每天都在充斥着大家的耳朵。    </p>
<p>我其实也对创业抱有着很大的热情，虽然还没有亲身出来，但是也很花时间和心思来关注。最近在微信朋友圈里，看到很多人都在转载一篇讲述创业看法的文章。点进去看了看，发现确实说的很不错，就顺便摘抄在这里了。    </p>
<p>若想查阅原文，请<a href="http://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&amp;mid=209141942&amp;idx=1&amp;sn=6a2bc63014a4f1aa7bc6381af4e8f32a&amp;scene=23&amp;srcid=0923noB6ujPmjrQnx2WsBUqA#rd" target="_blank" rel="external">点击这里</a>.</p>
<p>以前，我经常劝一些牛人，特别是技术牛人创业，因为在我眼里，这个世界机会太多，成功案例太多，总是替朋友们错失机会而可惜。（咳咳，其实我也一样）。但最近，我突然觉得，现在的环境下，对于某些类型的人才而言，创业未必是最佳选择。   </p>
<p>两个月前，一个技术大牛听说我恰好在上海，特意从杭州跑来跟我吃饭，这个家伙曾经是一家互联网巨头的架构师，当年因为看中游戏的创业热潮，（与我有关，惭愧，我向某大佬说这人水平了得，该大佬劝说他出来创业并给予最初的投资），出来组了团队做游戏，结果折腾了几年，团队一直没赚到什么钱，自己也一直很仗义的拿底薪，异常拮据，他感慨说，当时如果留在原公司，现在至少年薪两百万，他说这话，我百分百的信，此人技术功底深不可测，我做技术分享经常引用他的博客内容。而他之前所在的公司，在高端人才上的薪酬吸引力在业内有目共睹。    </p>
<p>实话实说，十来年前，如果你能跟着一个上市公司，经历一次上市的疯狂，从而混到百万资产，已经足够让人羡慕。但今天，各个互联网巨头企业里，不乏大批百万年薪+的岗位，而且并不只是管理岗，技术岗一样有大量这样的鲜活案例，我在坡国认识一个中国来的面霸，拿到过多个国际巨头互联网公司的offer，当年曾经也放弃过google的offer，曾经一起吃饭的时候感慨说，他在国内互联网行业的同学，已经是百万年薪，远高于他现在的薪酬，尽管他在坡国已然属于技术圈里里较高收入的范畴。 在这种情况下，可以想象，一个技术大牛，创业的机会成本实在是够高。（题外话，我在知乎上说过，中国互联网高端技术人才的薪酬具有全球竞争力，有些人就是不信，十年前一批信息安全专家被老美挖走，最近几年你看还有么？最近被中国巨头挖回去的各种技术人才倒是一批批的。）    </p>
<p>我又想起我大学兼职打工时的老板，他在2000年左右把公司顺利卖掉，套现几千万人民币，在那个年代绝对是一大笔巨款，想想当时北京豪宅的价格是6000每平米。他有句话我至今记忆犹新，他说当年他刚到北京打拼的时候，但凡有一个30平米的小房子是自己的，都绝不会有后来的成就，很多创业成功的范例，都是万般无奈的情况下硬把自己逼出来的。但有意思的是，当他有了几千万，有了豪宅和好车的时候，对行业认识更深刻，对资源的掌握更强的时候，他的第二次创业，却没有再现辉煌。    </p>
<p>创业，真的不是一件光鲜，自由，体面的差事，你要经历数不清的委屈，误解，嘲讽，孤独，甚至背叛，然后，幸运的，把握那一点点潜在的机会，从而超脱。或不幸的，最终黯然收场。    </p>
<p>知乎上有人问“趁着年轻的时候，干点儿自己想干的事儿，无论成功还是失败，都会成为这辈子最美好的记忆，对么？”   </p>
<p>我的回答是 “<em>这话通常是最终的成功者说的。失败者都没资格说</em>”</p>
<p>是的，很残酷，但这才是真相，失败者的待遇是，你身边各种亲朋好友以及同行及评论家都会摆出一副胜利预言的样子跟你说“看看，我早说你这样不行的吧”。 你还认为这是美好记忆么？ 那些秀美好的都是功成名就的大佬，人家有资格把苦难当作美好的记忆，你有么？   </p>
<p>创业，首先需要一颗<strong>大心脏</strong>。</p>
<p>如果放弃一份优渥的薪酬，去做三年不赚钱的事情，我的女（男）朋友不会离我而去，我的父母家人不会因病困潦倒而陷入挣扎，我自己不会因为忧郁和烦躁而失去平和的心态，甚至继续前行的勇气，每个创业者，都要问一下自己这个问题。如果你做不到，那么，对于你的创业梦想，还请再斟酌一下    </p>
<p>我十几年前少不更事的时候，自以为是的写了一些关于互联网创业的文章，似乎还被转载到一些媒体上，今天回头看简直是蠢爆了，我当时提到的所有自以为的关键因素，钱，资源，技术能力等等，其实，说真的，都不重要。 重要的是，创业者对创业这件事的态度，以及实战中的学习和应变的能力。请相信我，这比背景，资源，管理，财务都重要的多的多。    </p>
<p>今天是关于创业的开篇，可能吓到了一些创业中的朋友，下面说个新鲜案例给受到刺激的朋友回回血。    </p>
<p>前几天一个老同事开着新买的特斯拉请我吃饭，在四五年前，名义上我是他的上司，当时我给他的评定是执行力非常强，方向感比较一般。后来他辞职创业，对他所从事的具体项目，我也不是特别看好，正如我的判断，他的方向上实在太脱离市场了，但是他遇到了一个特别有耐心的投资人，对他一直很信任，很支持，经过了三年的挣扎，市场的风向变了，他的产品终于一炮打响，成功翻身，而今身价逾亿，请我吃了一顿688每位的豪华大餐，他表达了对我当年的感激，我说你这不是打脸么，明明你做成的是我不看好的事情，他说，其实也是运气，那我就说，就算是运气，也是因为你们做的好，运气才会光临，这一点倒是达成共识了。</p>
<p>这件事情给了我一个很明确的教训，创业者必须坚持自己的兴趣，才能做出有价值的产品，我以前曾经喜欢给创业者各种支招，告诉他们什么领域更有机会，但我发现，劝一个创业者去做他不敢兴趣不愿意投入的领域，和让他去打工有什么区别么？</p>
<p>创业，需要一种<strong>坚持</strong>，别人都不信你的时候，所谓领域内大牛和专家宣判了你死刑的时候，你还敢不敢相信自己做的是对的？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时下，创业在中国，刮起了一股异常迅猛的风暴，而且还大有愈演愈烈的趋势。几乎每隔几天，我们就可以听到那个谁谁出去创业的消息。仿佛一下子，钱也变的越来越不值钱了，随随便便一个点子，连个产品都不需要，就能找到投资人，发布融资成功的信息。&lt;/p&gt;
&lt;p&gt;很多很多人为了赶上这个史上最
    
    </summary>
    
      <category term="关注兴趣" scheme="http://azonwan.github.io/categories/%E5%85%B3%E6%B3%A8%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="创业 startup" scheme="http://azonwan.github.io/tags/%E5%88%9B%E4%B8%9A-startup/"/>
    
  </entry>
  
  <entry>
    <title>谈谈创业2</title>
    <link href="http://azonwan.github.io/2017-08-02-2015-09-23-startup-2.md"/>
    <id>http://azonwan.github.io/2017-08-02-2015-09-23-startup-2.md</id>
    <published>2017-08-02T09:32:48.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>接下来转载［caoz的梦呓］创业看法的第二部分。 </p>
<p>想看原文，请点击<a href="http://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&amp;mid=209167867&amp;idx=1&amp;sn=fce7921306661e14f6dd47d280baf6de&amp;scene=23&amp;srcid=0923pS958QZ2n6tVOK6C3sHm#rd" target="_blank" rel="external">这里</a></p>
<p>我把创业者分成两大类型，一种是现实主义，一种是理想主义。   </p>
<p>现实主义的典型是草根创业者，如早期的站长，没有特别的远大目标，但善于经营流量，流量变现思路清楚，不做亏本的买卖。如一些非常“山寨”的游戏开发者（非贬义），对热点的跟进能力强，执行效率高，快速迭代能力强，当然，原创能力基本没有。</p>
<p>现实主义者善于从0到1，将一个事情快速的起步，在低成本甚至0成本的情况下做到用户量和收入能力，典型的几个草根创业的朋友，几年前就常跟我说 “其实我什么都不会，就会赚点钱，你看每个月赚个五六万，十来万，很轻松，但是没意义啊。”听这话我就恨得牙痒痒的，但是人家说的是真的。现实主义者的武器通常是SEO，ASO，社交网络营销等等各种低成本的传播技巧，当然也有一些精通SEM的玩花钱买钱的游戏，这是现实主义中的数据分析流派。</p>
<p>但现实主义创业者往往缺乏远大的目标和对未来的方向感，对技术依赖度不高，对规模化运营缺乏信心，也不容易获得投资商的认可，我认识一个流量运营能力非常强的个人站长，但是他就总跟我抱怨，没有人愿意投资他，说实话，是的，他非常善于用各种技巧做到相当高的用户量，以及甚至每年几百万乃至上千万的收入，而且利润率还不低，但再往上是什么？他给不出目标，给不出愿景，他给投资人的大体只能是，你出多少钱，我每年分你多少红。算下来保证能赚钱，但这真不是投资人想要的。</p>
<p>理想主义创业者的构成则比较复杂，少不更事热血澎湃的大学生，BAT的经理人，海归创业者，以及不差钱的富二代等等。理想主义者有远大的目标和愿景，他们想的是100,1000以上的东西，但是很遗憾，大部分人不知道怎么从0做到1。我遇到不止一个这样的创业者，跟我讲他们的创业方案，在未来，如何形成大数据的平台，如何挖掘用户深层价值，规模化之后资本运作的目标和诉求是什么，都说了很多，那么我说，第一批用户哪里来？哎呀，居然没想过，他们的理解是，我的产品是有价值的，做出来放在那里，用户难道看不到么？ 不用客气，用户真的看不到。特别是一些互联网巨头出来创业的朋友，他们习惯于在原有的平台上做产品，随便做出一个产品就有足够的曝光度和测试用户，当他们发现，原来辛辛苦苦做出来的产品还需要自己去找种子用户的时候，才突然意识到原来自己的计划里从来没有这一条。 理想主义者喜欢高举高打，所以占据媒体版面的通常是他们，成的风光八面，败得也轰轰烈烈。人家的目标，就算不是乔布斯，至少也是BAT。 所以我们有时候说创业成功几率低，说真心话，理想主义创业者成功几率真不高，当然，一旦成了，这事还真不小。</p>
<p>那么说到这里，我想大家都知道我想说啥了，既要脚踏实地，又要仰望星空。 理想主义固然好，但如果你想让自己的创业团队活下来，创业初期更多还是需要现实一点，除非你真的不差钱。 现实主义者也需要多看看未来，不能只是停留在一些掌握一些运营的技巧上，要舍得为未来投资，气魄更大一点。</p>
<p>文章写到这里的时候，突然发现范凯的个人公众号“肉饼铺子”今天发了一篇文章，“增长黑客与个人站长”，说的还挺应景，一个特别实战的案例，获取种子用户的思路和技巧。我这里没办法加链接，大家搜索公众号“肉饼铺子”去订阅看看吧。   </p>
<p>下面说点更具体的，创业者要平衡理想与现实的关系，还要理解资源和能力的局限性，想起以前一个典型的段子，某个将军一直在抱怨，兵员补充不足，弹药不足，油料不足，冬装不足，食品不足，一直在紧缺的情况下作战，突然有一天，所有的东西都完备了，战争已经结束了。 这其实是一个挺典型的创业场景，从你计划创业开始，就一直要跟资源紧缺作战，缺乏人才，缺乏资金，缺乏技术，但是你必须在市场竞争中冲出去，如果你等所有的条件都完备了再启动，对不起，这个市场已经饱和了，战争结束了。  知乎上几乎成为一个梗的话题就是“就缺一个程序员了”，很多理想主义创业者都觉得自己的项目有着非常伟大的前景，只是还欠缺他们认为微不足道的一点资源或技术，就完全可以把阳光照进梦想，但是请相信我，即便你找到了程序员，你依然会发现，原来你还缺运维，原来你还缺架构师（如果发展不错的话，如果发展不起来，嗯，这个就不需要了），原来你还缺DBA，靠，好好运营的产品居然被人黑了，原来你还缺安全人才，程序员居然不是万能的，原来你还缺前端（后端），安卓（ios）,总而言之，你几乎不可能看到人才齐备资源完整的那一天，不信你去看，连李彦宏都没找到合适的CTO呢。</p>
<p>与资源紧缺和不足作战，你还能创业么？还敢创业么？</p>
<p>第一，控制需求，我再次强调俞军老师说过的那句经典的话，好的产品经理是做减法的，开一个头脑风暴会，你可以得到几十个非常不错的点子和想法，别觉得自己的创意多么了不起，要学会裁剪，你有什么资源，有什么人才，你的产品必须基于你已有的资源和优势，其他的东西再好，跟你没关系！</p>
<p>第二，学会规避，规避不擅长，人才匮乏和资源不足的领域，从需求设计到产品选型，都要学会规避你的弱点，你是创业者，你不可能面面俱到，样样精通，必须有所取舍。 技术上也有很多规避的途径，创业中你解决不了的问题一定会有很多，与其埋怨没有合适的人才，不如选择更适合你的路线。</p>
<p>第三，强化自身，很多创业者硬把自己逼成了万能的，有一个特别经典的案例，一个个人站长，非技术出身，非名校毕业，学历也不高的那种，做网站流量运营的风声水起，用开源软件做社区，用户量屡创新高，然后服务器就各种撑不住，但限于成本，身边也没有人才，硬逼着自己学技术，到处求教，到处翻技术文章，最后，用了两台服务器硬是撑住了一天2000万的pageview，是的，没错，是pageview，不是hits，是论坛，不是静态发布站，这是六七年前的事情，用的当时很普通的服务器（个人站长，当时很穷的说），最初别人跟我求证的时候，我第一反应是断然不信，后来我去看了一下自己掌握的数据采样（曾经我手里有国内最全的数据渠道），居然是真的！然后深入了解了一下他做的事情，简直难以想象一个没有编程功底的人怎么能自学成这样的水准！ 很多创业者都逼着自己学会了很多东西，你没有资源，没有人才，那就能靠自己。</p>
<p>第四，不苛求完美，这可能是某些理想主义者非常不爱听的话，但是创业是一个需要不断迭代，不断试错的过程，你与其前期花太多时间和精力用于一些雕琢，不如快速原型快速迭代。    </p>
<p>当然，这只限于新兴市场，成熟市场对产品的完美度要求更高。   </p>
<p>比如说，在智能手机刚出现的时候，你咔嚓快速推出安卓手机，快速迭代征集反馈，你肯定是对的，现在安卓机器满大街了，再去拼速度你已经起步慢了一大截，就必须学罗永浩讲讲情怀了。   </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接下来转载［caoz的梦呓］创业看法的第二部分。 &lt;/p&gt;
&lt;p&gt;想看原文，请点击&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&amp;amp;mid=209167867&amp;amp;idx=1&amp;amp;sn=fce
    
    </summary>
    
      <category term="关注兴趣" scheme="http://azonwan.github.io/categories/%E5%85%B3%E6%B3%A8%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="创业 startup" scheme="http://azonwan.github.io/tags/%E5%88%9B%E4%B8%9A-startup/"/>
    
  </entry>
  
  <entry>
    <title>git详细操作介绍</title>
    <link href="http://azonwan.github.io/2017-08-02-2015-09-23-git-tutorial.md"/>
    <id>http://azonwan.github.io/2017-08-02-2015-09-23-git-tutorial.md</id>
    <published>2017-08-02T09:32:48.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>因为工作需要，要经常使用git。虽然git在如今是最流行最火热的版本控制管理工具，但是很诚恳的讲，我对其使用的并不熟练，每天操作最多的也就是pull,push,diff这几个简单的常用的命令而已。工作中，也有同事会想我咨询一些关于git的一些使用问题。我在帮忙解决的时候，也在自我补充。今天，在网上搜索到了一篇git使用方法讲解的特别全面详细的教程，立刻有一种淘到宝的感觉，赶紧坐下来转载过来。</p>
<p>原文地址：<a href="http://www.admin10000.com/document/5374.html" target="_blank" rel="external">http://www.admin10000.com/document/5374.html</a></p>
<p>我在这里，针对重要的操作做下简单的抄录，以备日后查用。    </p>
<h3 id="SVN同GIT的区别"><a href="#SVN同GIT的区别" class="headerlink" title="SVN同GIT的区别"></a>SVN同GIT的区别</h3><p>SVN是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就不行了。</p>
<p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p>
<h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>什么是版本库？版本库又名仓库，英文名repository,你可以简单的理解一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改，删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻还可以将文件”还原”。   </p>
<ol>
<li>进入到文件目录中，通过命令 git init 把这个目录变成git可以管理的仓库<br><img src="/album/git/git-init.png" alt="">    </li>
</ol>
<p>这时候你当前目录下会多了一个.git的目录，这个目录是Git来跟踪管理版本的，没事<em>千万不要手动乱改这个目录里面的文件</em>，否则，会把git仓库给破坏了</p>
<ol>
<li>把文件添加到版本库中</li>
</ol>
<p>首先要明确下，所有的版本控制系统，只能跟踪文本文件的改动，比如txt文件，网页，所有程序的代码等，Git也不列外，版本控制系统可以告诉你每次的改动，但是图片，视频这些二进制文件，虽能也能由版本控制系统管理，但没法跟踪文件的变化，只能把二进制文件每次改动串起来，也就是知道图片从1kb变成2kb，但是到底改了啥，版本控制也不知道。   </p>
<p>使用命令 git add readme.txt添加到暂存区里面去<br><img src="/album/git/git-add.png" alt="">  </p>
<p>用命令 git commit告诉Git，把文件提交到仓库<br><img src="/album/git/git-commit.png" alt=""></p>
<h3 id="提交纪录"><a href="#提交纪录" class="headerlink" title="提交纪录"></a>提交纪录</h3><p>想要查看提交的历史纪录，可用git log来实现<br><img src="/album/git/git-log.png" alt="">  </p>
<p>git log命令显示从最近到最远的显示日志，我们可以看到最近三次提交，最近的一次是,增加内容为333333.上一次是添加内容222222，第一次默认是 111111.如果嫌上面显示的信息太多的话，我们可以使用命令 git log –pretty=oneline 演示如下<br><img src="/album/git/git-log-oneline.png" alt="">  </p>
<h3 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h3><p>现在我想使用版本回退操作，我想把当前的版本回退到上一个版本，要使用什么命令呢？可以使用如下2种命令，第一种是：git reset  –hard HEAD^ 那么如果要回退到上上个版本只需把HEAD^ 改成 HEAD^^ 以此类推。那如果要回退到前100个版本的话，使用上面的方法肯定不方便，我们可以使用下面的简便命令操作：git reset  –hard HEAD~100 即可   </p>
<p>我们已经回退到了上一个版本。但是如果我们突然又不想回退了，怎么办呢？这时候，通过git log命令已经找不到最新的版本号了。可以通过如下命令即可获取到版本号：git reflog   </p>
<p><img src="/album/git/git-reflog.png" alt=""></p>
<p>找到对应的版本号了，我们就可以继续使用git reset –hard 版本号 来找到对应版本的文件了</p>
<h3 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h3><p>工作区：就是你在电脑上看到的目录，比如目录下testgit里的文件(.git隐藏目录版本库除外)。或者以后需要再新建的目录文件等等都属于工作区范畴<br>版本库(Repository)：工作区有一个隐藏目录.git,这个不属于工作区，这是版本库。其中版本库里面存了很多东西，其中最重要的就是stage(暂存区)，还有Git为我们自动创建了第一个分支master,以及指向master的一个指针HEAD<br>我们前面说过使用Git提交文件到版本库有两步：<br>第一步：是使用 git add 把文件添加进去，实际上就是把文件添加到暂存区<br>第二步：使用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支上   </p>
<h3 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h3><p>在未提交文件之前，我们发现修改的内容有错，现在想撤销这些修改，可以有两种方法。<br>第一种，直接手动更改去掉那些需要的文件，然后add添加到暂存区，最后commit掉<br>第二种，我可以按以前的方法直接恢复到上一个版本。使用 git reset  –hard HEAD^    </p>
<p>但是现在我不想使用上面的2种方法，我想直接想使用撤销命令该如何操作呢？首先在做撤销之前，我们可以先用 git status 查看下当前的状态<br><img src="/album/git/git-status.png" alt=""></p>
<p>可以发现，Git会告诉你，git checkout  – file 可以丢弃工作区的修改，如下命令<br>git checkout  –  readme.txt<br>命令 git checkout –readme.txt 意思就是，把readme.txt文件在工作区做的修改全部撤销，这里有2种情况，如下     </p>
<ol>
<li>readme.txt自动修改后，还没有放到暂存区，使用 撤销修改就回到和版本库一模一样的状态     </li>
<li>另外一种是readme.txt已经放入暂存区了，接着又作了修改，撤销修改就回到添加暂存区后的状态   </li>
</ol>
<p>注意：命令git checkout – readme.txt 中的 – 很重要，如果没有 – 的话，那么命令变成创建分支了。   </p>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>假如我现在版本库testgit目录添加一个文件b.txt,然后提交。如下：   </p>
<p><img src="/album/git/git-delete.png" alt="">   </p>
<p>如上：一般情况下，可以直接在文件目录中把文件删了，或者使用如上rm命令：rm b.txt ，如果我想彻底从版本库中删掉了此文件的话，可以再执行commit命令 提交掉</p>
<h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>在了解之前，先注册github账号，由于你的本地Git仓库和github仓库之间的传输是通过SSH加密的，所以需要一点设置   </p>
<p>第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有id_rsa和id_rsa.pub这两个文件，如果有的话，直接跳过此如下命令，如果没有的话，打开命令行，输入如下命令    </p>
<pre><code>ssh-keygen  -t rsa –C “youremail@example.com”
</code></pre><p>id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，可以放心地告诉任何人  </p>
<p>第二步：登录github,打开” settings”中的SSH Keys页面，然后点击“Add SSH Key”,填上任意title，在Key文本框里黏贴id<em>rsa.pub文件的内容</em>。    </p>
<p><img src="/album/git/github.png" alt="">     </p>
<p>点击 Add Key，你就应该可以看到已经添加的key.    </p>
<p>第三步：添加远程库    </p>
<p>首先，登录github上，然后在右上角找到“create a new repo”创建一个新的仓库   </p>
<p><img src="/album/git/github-repo.png" alt="">   </p>
<p>目前，在GitHub上的这个testgit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库   </p>
<p>现在，我们根据GitHub的提示，在本地的testgit仓库下运行命令   </p>
<pre><code>git remote add origin https://github.com/tugenhua0707/testgit.git  
</code></pre><p><img src="/album/git/github-remote-add.png" alt="">  </p>
<p>把本地库的内容推送到远程，使用 git push命令，实际上是把当前分支master推送到远程   </p>
<p>由于远程库是空的，我们第一次推送master分支时，加上了 –u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。   </p>
<h3 id="远程库克隆"><a href="#远程库克隆" class="headerlink" title="远程库克隆"></a>远程库克隆</h3><p>上面我们了解了先有本地库，后有远程库时候，如何关联远程库  </p>
<p>想要克隆一个远程库，可以通过命令git clone来实现</p>
<p><img src="/album/git/git-clone.png" alt="">  </p>
<h3 id="分支的创建和合并"><a href="#分支的创建和合并" class="headerlink" title="分支的创建和合并"></a>分支的创建和合并</h3><p>在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。    </p>
<p>首先，我们来创建dev分支，然后切换到dev分支上。</p>
<p><img src="/album/git/git-branch.png" alt="">   </p>
<p>git branch查看分支，会列出所有的分支，当前分支前面会添加一个星号。然后我们在dev分支上继续做demo，比如我们现在在readme.txt再增加一行 7777777777777  </p>
<p>首先我们先来查看下readme.txt内容，接着添加内容77777777，如下<br><img src="/album/git/git-dev.png" alt="">  </p>
<p>现在dev分支工作已完成，现在我们切换到主分支master上，继续查看readme.txt内容如下<br><img src="/album/git/git-master.png" alt="">  </p>
<p>现在我们可以把dev分支上的内容合并到分支master上了，可以在master分支上，使用如下命令 git merge dev 如下所示<br><img src="/album/git/git-merge.png" alt="">  </p>
<p>git merge命令用于合并指定分支到当前分支上，合并后，再查看readme.txt内容，可以看到，和dev分支最新提交的是完全一样的     </p>
<p>注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快     </p>
<p>合并完成后，我们可以接着删除dev分支了，操作如下<br><img src="/album/git/git-branch-delete.png" alt="">   </p>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><p>通常合并分支时，git一般使用”Fast forward”模式，在这种模式下，删除分支后，会丢掉分支信息，现在我们来使用带参数 –no-ff来禁用”Fast forward”模式。</p>
<p>分支策略：首先master主分支应该是非常稳定的，也就是用来发布新版本，一般情况下不允许在上面干活，干活一般情况下在新建的dev分支上干活，干完后，比如上要发布，或者说dev分支代码稳定后可以合并到主分支master上来    </p>
<h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p>当你从远程库克隆时候，实际上Git自动把本地的master分支和远程的master分支对应起来了，并且远程库的默认名称是origin   </p>
<ol>
<li>要查看远程库的信息 使用 git remote   </li>
<li>要查看远程库的详细信息 使用 git remote –v  </li>
</ol>
<p><img src="/album/git/git-remote.png" alt=""> </p>
<p>一：推送分支：<br>推送分支就是把该分支上所有本地提交到远程库中，推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上<br>使用命令 git push origin master<br>如果我们现在要推送到其他分支，比如dev分支上，我们还是那个命令 git push origin dev     </p>
<p>二：抓取分支:<br>多人协作时，大家都会往master分支上推送各自的修改。现在我们可以模拟另外一个同事，可以在另一台电脑上（注意要把SSH key添加到github上）或者同一台电脑上另外一个目录克隆，新建一个目录名字叫testgit2<br>但是我首先要把dev分支也要推送到远程去 git push origin dev    </p>
<p>接着进入testgit2目录，进行克隆远程的库到本地来     </p>
<p>现在我们的小伙伴要在dev分支上做开发，就必须把远程的origin的dev分支到本地来，于是可以使用命令创建本地dev分支：git checkout  –b dev origin/dev    </p>
<p><img src="/album/git/git-branch-remote.png" alt="">  </p>
<p>小伙伴们已经向origin/dev分支上推送了提交，而我在我的目录文件下也对同样的文件同个地方作了修改，也试图推送到远程库时<br><img src="/album/git/git-branch-remote-push.png" alt="">   </p>
<p>由上面可知：推送失败，因为我的小伙伴最新提交的和我试图推送的有冲突，解决的办法也很简单，上面已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后在本地合并，解决冲突，再推送   </p>
<p><img src="/album/git/git-branch-remote-pull.png" alt="">    </p>
<p>git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接    </p>
<p><img src="/album/git/git-branch-set-upstream.png" alt="">  </p>
<p>因此：多人协作工作模式一般是这样的    </p>
<ol>
<li>首先，可以试图用git push origin branch-name推送自己的修改</li>
<li>如果推送失败，则因为远程分支比你的本地更新早，需要先用git pull试图合并  </li>
<li>如果合并有冲突，则需要解决冲突，并在本地提交。再用git push origin branch-name推送  </li>
</ol>
<h3 id="Git基本常用命令"><a href="#Git基本常用命令" class="headerlink" title="Git基本常用命令"></a>Git基本常用命令</h3><pre><code>mkdir：         XX (创建一个空目录 XX指目录名)

pwd：          显示当前目录的路径。

git init          把当前的目录变成可以管理的git仓库，生成隐藏.git文件。

git add XX       把xx文件添加到暂存区去。

git commit –m “XX”  提交文件 –m 后面的是注释。

git status        查看仓库状态

git diff  XX      查看XX文件修改了那些内容

git log          查看历史记录

git reset  --hard HEAD^ 或者 git reset  --hard HEAD~ 回退到上一个版本

(如果想回退到100个版本，使用git reset –hard HEAD~100 )

cat XX         查看XX文件内容

git reflog       查看历史记录的版本号id

git checkout -- XX  把XX文件在工作区的修改全部撤销。

git rm XX          删除XX文件

git remote add origin https://github.com/tugenhua0707/testgit 关联一个远程库

git push –u(第一次要用-u 以后不需要) origin master 把当前master分支推送到远程库

git clone https://github.com/tugenhua0707/testgit  从远程库中克隆

git checkout –b dev  创建dev分支 并切换到dev分支上

git branch  查看当前所有的分支

git checkout master 切换回master分支

git merge dev    在当前的分支上合并dev分支

git branch –d dev 删除dev分支

git branch name  创建分支

git stash 把当前的工作隐藏起来 等以后恢复现场后继续工作

git stash list 查看所有被隐藏的文件列表

git stash apply 恢复被隐藏的文件，但是内容不删除

git stash drop 删除文件

git stash pop 恢复文件的同时 也删除文件

git remote 查看远程库的信息

git remote –v 查看远程库的详细信息

git push origin master  Git会把master分支推送到远程库对应的远程分支上
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为工作需要，要经常使用git。虽然git在如今是最流行最火热的版本控制管理工具，但是很诚恳的讲，我对其使用的并不熟练，每天操作最多的也就是pull,push,diff这几个简单的常用的命令而已。工作中，也有同事会想我咨询一些关于git的一些使用问题。我在帮忙解决的时候，也
    
    </summary>
    
      <category term="技术积累" scheme="http://azonwan.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="git" scheme="http://azonwan.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>谈谈创业3</title>
    <link href="http://azonwan.github.io/2017-08-02-2015-09-23-startup-3.md"/>
    <id>http://azonwan.github.io/2017-08-02-2015-09-23-startup-3.md</id>
    <published>2017-08-02T09:32:48.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>接下来是，我们继续来关注下这个主题的第三部分.</p>
<p>若想查看原文，请点击<a href="http://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&amp;mid=209183244&amp;idx=1&amp;sn=160e56b09c99e0cd1df80a4de8165fe6&amp;scene=23&amp;srcid=09231bk4X0mGwsrtL4nylFkF#rd" target="_blank" rel="external">这里</a>.</p>
<p>这几天看到好几个朋友问，案例呢，案例呢。我能理解读者的期待，但是说真的，正如两天前说的，很多东西真不能公开讲，更何况我自己也不敢说真的特别了解那些细节。 我今天会简单指出几个方向和相关案例，有兴趣的朋友请自行深挖</p>
<p>没有人会手把手教你创业，别人没这个义务，很多东西你必须自己去研究</p>
<p>流量获取的通道，就大方向而言，包括广告采购，搜索优化，社交营销，广告采购最大的一块是SEM，其他还有很多；搜索优化目前包括SEO和ASO，前者是针对搜索引擎，后者针对各种移动市场，但其实只要涉及搜索的平台，包括淘宝在内，都有搜索优化的空间。社交营销主要平台是微博，微信，朋友圈，陌陌等，海外是Facebook，twitter，youtube，instagram，以及snapchat等</p>
<p>SEM这块，很早之前google和百度的广告系统还不够完善的时候，有很大的空子可以钻，2004年吴京川老师（百度元老，百度联盟的创始人，最早发现hao123巨大价值的人，当年我做统计系统也是受他影响和指点）讲google SEM搜索套利模式的时候，我听的一愣一愣的，完全没听懂，等2007年我听明白的时候，这个市场已经过去了。简单点说就是，寻找google搜索广告中价格被低估而转化效果好的长尾词，买这些广告，但不用做网站，直接放ebay的效果广告，说白了就是替ebay买google的广告，但是如果你数据玩的好，对转化率跟踪比较做的透，就可以赚钱，这个生意有多大呢？有个公司靠做这个后来卖了几个亿美金（有意思么，那时候几亿美金绝对不是小数字，但是国内的媒体上基本没人报）。但随着google和百度广告系统的不断完善，这个空子基本没有了。</p>
<p>目前依靠SEM的很多是跨境电商，典型如做到上市的兰亭集势，此外香港上市的dx.com不确定对SEM的依赖度高不高。 想要具体了解SEM的有关数据，semrush.com 是一个非常不错的数据网站。</p>
<p>下面说一下SEO，很多人对SEO有一种误解，认为追寻SEO就是骗取搜索引擎流量，是不入流的做法，特别是一些精英背景的创业者，往往听到SEO就嗤之以鼻，这是非常不对的。</p>
<p>SEO我讲过，分三层境界，获得热门词的前几名，是第一层境界，也就是大部分人对SEO的理解，提升搜索引擎的收录和权值，让网站在搜索引擎中有非常多的收录，每天获得大量的长尾词来路，是第二层境界，也是通常一些专业SEO服务公司的目标。而第三层境界是，让自己的品牌词成为热门词，在指数上有显著的体现，达到这一境界，你就不用担心搜索引擎会封掉你的站，典型如淘宝，很早就主动屏蔽了百度的蜘蛛，但是每天通过品牌词从百度搜索过去的用户多达数百万，这就是品牌的极端案例。</p>
<p>下面说几个关于SEO比较成功的案例，先说重量级的，在上市公司里，汽车之家是非常非常重视SEO的一个典范，58同城和赶集网当年在SEO上的争夺和投入都是非常巨大的，此外，同程旅游网对外接受采访的时候也公开说SEO是他们的核心竞争力。看到这些案例，还会觉得这是小儿科的东西么？ 未上市公司里，4399的品牌强度是首屈一指的，去年估值几个亿卖掉的欣欣旅游早期在SEO优化上也是成绩斐然，当时著名站长夏天天给他们做过一次培训，边悦同学贯彻和操盘了优化的过程，（边悦后来自己出去创业，是个典型的实用主义创业者，靠SEM赚的风声水气，当然，媒体上看不到他。） 另外两个值得一提的案例，一个是麦包包，一个是名鞋库。这涉及一个“出淘”的概念，很多淘品牌发现淘宝上运营成本越来越高，对淘宝依赖性越来越强，所以很多商家也希望自建官网，减少对淘宝的依赖度，但是官网流量和用户哪里来？在移动互联网到来之前，只有百度是最大的流量入口，但大部分淘品牌，自建官网的流量运营并不顺利，而麦包包和名鞋库则是两个非常成功的范例，在三年前的样子，麦包包是所有淘品牌里百度指数最高的一个，而且是遥遥领先于所有其他淘品牌，操盘手是柳焕斌，柳焕斌离职后，目前似乎已经不再具有如此明显的领先优势，有兴趣的同学可以到百度指数上查询一下，时间轴拉长，对比麦包包和其他淘品牌关键词，看看当年的趋势变化。 名鞋库我记得在11年还是12年的时候，当时每天百度来路只有1000多而已，我跟他们市场副总裁韩步勇一向关系不错，还拿这个取笑过他们，但转年人家知耻而后勇，定下了每天百度来路6万的指标，通过和刑天SEO团队的深度合作，到年底的时候，竟然真的实现了。成为所有鞋类电商百度来路最多的平台，是的，超过了好乐买，也超过了当时的乐淘。仅此一项，每年节省广告费数千万，形成销售额数亿。而成本真的并不高。</p>
<p>SEO这个话题如果扯开实在太大，有兴趣的同学，除了多去看百度指数，百度热榜外，建议学习使用aizhan.com，我前几年几乎每天都在aizhan.com上分析关键词，分析竞争对手的搜索来路构成。</p>
<p>说一个观点，我们天天讲产品要满足用户需求，什么是用户需求？产品经理拍拍脑袋就是用户需求么？为什么用户会去搜索引擎搜索？搜索行为不就是用户需求么？搜索的频率不就是需求的强度么？按照用户的搜索词频度去设计网站，定义网站的架构，不就是满足用户需求么？你连用户搜索行为都不分析，摆出一副高高在上，我只关心用户，不关心搜索的态度，你真的关心的是用户么？</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接下来是，我们继续来关注下这个主题的第三部分.&lt;/p&gt;
&lt;p&gt;若想查看原文，请点击&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&amp;amp;mid=209183244&amp;amp;idx=1&amp;amp;sn=160
    
    </summary>
    
      <category term="关注兴趣" scheme="http://azonwan.github.io/categories/%E5%85%B3%E6%B3%A8%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="startup 创业" scheme="http://azonwan.github.io/tags/startup-%E5%88%9B%E4%B8%9A/"/>
    
  </entry>
  
  <entry>
    <title>谈谈创业5</title>
    <link href="http://azonwan.github.io/2017-08-02-2015-09-23-startup-5.md"/>
    <id>http://azonwan.github.io/2017-08-02-2015-09-23-startup-5.md</id>
    <published>2017-08-02T09:32:48.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>接下来是该主题的第五部分。</p>
<p>查看原文，请点击<a href="http://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&amp;mid=209323482&amp;idx=1&amp;sn=46e33e60c243462c8986c78ff51eade4&amp;scene=23&amp;srcid=09235ykAW5xYdSBq1sFjsSlw#rd" target="_blank" rel="external">这里</a>.</p>
<p>十来年前的时候，三个厦门的草根创业者，站在海峡国际社区的外面（厦门的东海岸的高端楼盘，从最早一期，二期建到现在好像都七期了）立下一个约定，如果日后能有所成就，大家来这里买房做邻居。</p>
<p>到了十年后，2013年的时候，他们兑现了这个约定。（当然，必须说明，这其实并不是他们第一次购房，他们每个人都已经有了其他房产，有的甚至已经购置了多套别墅，但是他们还是决定一起搬到这个小区做邻居）。 听上去像是一个中国合伙人的故事吧。 但要解释的是，这三个人并不是一起创业成功，而是在三个不同的领域创业，各自获得了成功。</p>
<p>一个是姚剑军，网名阿飞，他创办的飞鱼科技在香港上市，一个是吴欣鸿，绰号宝马哥，他创建的美图秀秀相信不用再解释，还有一个叫孔德菁，网名丸子，他创建的易名中国是国内最大的域名交易平台，此外新创建云朵科技投入到智能硬件领域，虽然名气不如前两位，但重资拿下迪士尼，漫威，小黄人等版权授权，实力也相当惊人。</p>
<p>但是十年前，他们都只是默默无闻的个人站长，盘算赚的钱够不够养服务器。</p>
<p>有些朋友知道说我有个神秘的群，里面很多大佬，创业的成功人士，但是他们普遍存在一个误解，以为说，我很有人脉，把认识的很多牛人塞进我的群里。但是错了，实际不是这样的，在十来年前，我创建群的时候，只是对社交网络好奇，那时候有一个概念特别火，叫做六度人际，但是我总觉得这个概念不太靠谱，所以我想做个测试，六度人际是什么不清楚，但是二度人际我是可以自己来测试的，于是我把不同时期认识的不同背景的朋友放在一起，看他们会不会有聚合，有交互，当然，有的人流失了，有的人还在，有意思的是，在这个群里，当时媒体圈的人全流失了，大概是因为，这个群里没有一个是他们认为有价值的人，都是一些草根，整天讲的都是很low的一些话题，不过我相信，如果他们知道后来的发展，肯定会后悔退群的决定。 那么十年过去了，这个群的发展远远超出我的想象，就说一个数字吧，平均身价的增幅是100倍！ 我没说错，是100倍！（可惜我自己远远达不到。） 现在上市公司的创始人和CEO有好几个，把公司卖给上市公司的有好几个，从打工到创业估值几亿美元的，即便是继续打工的，这些年来平均年收入跃升十倍也是有的。上面例子提到的三个人，就是在这个群里，属于比较典型有代表性的。这事我也一直思考，是什么魔力让这么一圈人的成功率远远高于行业的平均值？难道我真的有光环加持不成？</p>
<p>寻找合理的解释我只总结了两点</p>
<p>1、物以类聚，人以群分，这些人没有流失，是因为有共同话题，共同的兴趣，主要是因为价值观相对趋同，简单说就是，靠谱的人喜欢跟靠谱的人做朋友。所以产生了幸存者偏差。</p>
<p>2、不同背景、不同领域的人，产生交集后，大家的视野和思考问题的方式都会得到扩展，我相信这一点也非常重要，而其中形成了新的合作机会和互补性。</p>
<p>其他的，比如信息的价值和传递，分享精神，其实都可以归并于这两点里。</p>
<p>所以，回到创业这个话题，认识最优秀的人，并不是说你要认识很多大佬，但是你应该可以从身边找到这样的人，并与优秀的人多沟通，多交流，那么，怎么判别优秀的人？只说最简单的几个要素。</p>
<p>1、对信息的敏锐度和钻研精神。</p>
<p>遇到自己不了解但是却非常有价值的信息，这些人会立即记录下来，并随后通过搜索引擎或其他途径获得更进一步的信息。我所遇到的所有成功的创业者，都具有这样的特质。</p>
<p>2、担当与责任。</p>
<p>遇到困境和挫折，主动从自己身上找原因，找问题，不推托，不懈怠。很多草根创业者早就习惯了在没有钱，没有技术，没有人才的情况下做事情，他们永远不会等待外部环境满足了才动手，而是基于自己已有的资源快速实战，不断摸索。</p>
<p>很多创业者，并不是业务发展不起来而死掉的，而是发展到一定阶段，因为某个门槛过不去而死掉的，与其坐等哀怨没有人才，没有合伙人，不如想想自己如何解决。</p>
<p>3、对未来保持乐观。</p>
<p>十来年前，我其实挺瞧不起那些做投资的，我觉得他们什么都不懂，很多项目都是滥投，看他们投的那些项目各种吹牛，各种不靠谱，我也喜欢写文章冷嘲热讽，绝大部分情况下，我是对的。</p>
<p>可是最近这两年，我才发现是自己错了，错的离谱。</p>
<p>我们做个最简单的假设，十多年前，投资人投了10个项目，其中9个黄了，彻底gameover了，我嘲讽技能使用了10次，其中9次证明是我对了，成功率90%，哈哈，投资人比我笨多了。 但是，投资人这10个项目中，唯一投对的那个上市了，拿到了100倍回报。整体投资回报率是10倍。那么现在，谁应该笑谁是SB？这个假设其实一点都不夸张，十几年前，百倍回报的项目还不俯拾皆是？  </p>
<p>中国互联网最初的那些巨头，不论是马化腾，李彦宏，还是马云，乃至丁磊，张朝阳，史玉柱，雷军，我们有一个算一个，第一步走对了，知道未来正确路线图的，有么？一个都没有。</p>
<p>所以，既然连那些行业领袖在内，都没有人可以清晰判断未来，那么，不够乐观的人就会失去一切机会。</p>
<p>我知道还有一些圈子，从十几年前就天天内部互相吹捧，好像比谁都懂互联网，今天骂腾讯弱智，明天骂百度流氓，然后点评别人说的头头是道，真下水试试？ 然后就开始哀怨，巨头垄断，合伙人不给力，投资人不懂，这个那个全来了，总之，绝对没有自己的问题。 所以，在他们眼里，创业是个九死一生的事情，那是必然的了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接下来是该主题的第五部分。&lt;/p&gt;
&lt;p&gt;查看原文，请点击&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&amp;amp;mid=209323482&amp;amp;idx=1&amp;amp;sn=46e33e60c243462
    
    </summary>
    
      <category term="关注兴趣" scheme="http://azonwan.github.io/categories/%E5%85%B3%E6%B3%A8%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="创业 startup" scheme="http://azonwan.github.io/tags/%E5%88%9B%E4%B8%9A-startup/"/>
    
  </entry>
  
  <entry>
    <title>谈谈创业4</title>
    <link href="http://azonwan.github.io/2017-08-02-2015-09-23-startup-4.md"/>
    <id>http://azonwan.github.io/2017-08-02-2015-09-23-startup-4.md</id>
    <published>2017-08-02T09:32:48.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>接下来是该主题的第四部分了。</p>
<p>查看原文，请点击<a href="http://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&amp;mid=209219802&amp;idx=1&amp;sn=80af0e937c17b00fb4fef2baa5d09397&amp;scene=23&amp;srcid=0923Z9zTCRZf47eG7Epysvgk#rd" target="_blank" rel="external">这里</a>.</p>
<p>前几年，丁香园还没有现在这么风光的时候，应大辉的邀请去做了一次分享，关于如何利用互联网进行需求分析和竞争分析的。当时还有一位主动来蹭听的，叫做白鸦，那时候他的第一次创业不是很顺利，正在寻求新的方向。后来没多久，丁香园顺利拿到了顺为的投资，又后来，被腾讯入股，成为行业内的标杆企业。而白鸦的口袋通也迅速崛起，成为创业领域的新贵。</p>
<p>当然，我要是说这俩个项目成功都是我的功劳，那我简直太不要脸了。不过，可以自得的说一句，那次分享的好评度还是很高的，（当然也许是人家客气，反正我信了）。由于篇幅所限，我今天不会把当时的所有内容都分享出来，也就是说几个关键点，有兴趣的同学，还请自己挖掘。</p>
<p>我去丁香园分享之前，对在线医疗这个领域几乎一窍不通，对这个领域的网站谁做的比较好，谁不太好也是完全不了解（那时候智能手机市场还没起来，所以没有app。） 所以去之前的晚上，我做了点功课，是这样操作的。首先我上aizhan.com，点击关键词挖掘链接，输入我所知道的医疗行业的词根，比如“医”，或者“药”，我最喜欢用aizhan.com的原因就是关键词挖掘，可以基于词根搜索出一批指数词，而百度指数是不提供这种查询的。基于这些词根，我看到了很多热门的指数词，并能够体会到用户需求的强烈度。（专注研究百度指数10+年） 此外，还看到了这些词是哪个网站排在了前面，比如三九健康？比如寻医问药？ （当然最多的是百度自家的导流。 这事今天不讨论，先忽略。）然后我点击百度排名这个链接，逐一搜索这些搜索来路较多的网站，看他们的百度来路有多少，同时也看主要是什么热词来的，通过这个观察，我会发现新的一些热门的医疗词根，比如副作用，然后再回到关键词挖掘的页面，进行挖掘，如此重复。大概一个小时左右，我就可以了解这个行业在网络上，用户的需求分布在哪里，哪些网站解决了哪些主要的搜索目标，而丁香园在里面排在大概怎样的位置。</p>
<p>题外话，我前些年访问最频繁的网站大概就是爱站了，有段时间几乎每天都上去，主要就两件事，一个关键词挖掘，一个百度排名分析，来回反复，能够短时间了解一个领域或一个产品的用户诉求，以及领域内网站的流量和价值排名。 爱站的站长叫郑志平，是广东省梅州地区兴宁县的，和著名的站长李兴平是老乡。前几年我还约了朋友主动去梅州拜访他，一个个人站长居然能做出这样的数据平台，我是真觉得了不起。</p>
<p>回到正题，如果你善于使用爱站，其实你对用户需求，对竞争分析就会上一个台阶，当然，如果对其中的数据不放心，也可以同时用百度指数，360的爱搜指数做对比。</p>
<p>爱站是一个好工具，此外，alexa以前被中国人玩坏了，但其实这也是个好工具，很多人说alexa数据不准，但你要明白所有采样的数据都存在不准，但是依然有可以借鉴的价值，比如你可以对比alexa和chinarank的数据，以及其他第三方数据，对比起来，有些偏差就可以理解。另外，alexa的数据不只是排名而已，很多人以为看alexa就看排名，我最关心的是访问的频道分布，以及访问的上下游，而这个上下游，其实很多时候特别特别关键。你不想知道你的竞品网站流量从哪里来的么？但是有几个互联网行业的人知道去alexa看网站的流量上下游呢？</p>
<p>用爱站，用百度指数，在看数据之余，要理解指数背后的逻辑，所谓的关联词，所谓的长尾词，所谓的词根扩展词，他们告诉了我们什么，对我们做需求分析和竞品分析有怎样的帮助，如果你只是去看，而不去思考，这个数据毫无价值，但今天这里不展开。</p>
<p>此外，一个非常好的调研工具，是百度知道，当然，贴吧也算，但知道更直接。在知乎上我回了一个问题，怎样做互联网的产品调研，我说善于利用百度知道，很多人不理解。是不是我去问问题看别人答复呢？这个受众面太窄了！ 利用百度知道调研，是去搜索，别人提出的问题和答案，基于你所感兴趣的领域，在知道上，有大量的提问和大量的答复，如果你善于搜索，这些提问和答复，就是你调研的目标。</p>
<p>以前在4399的时候，曾经有段时间，我们注意到，初中生有较多的流失，从4399流失到诸如赛尔号，洛克王国这样的儿童社交游戏中，当时我就有个想法，想了解这些初中生，脑子里都在想什么，他们关心什么问题，然后看看有什么值得做的，来留住他们。然后我就去百度知道搜索了一个词，什么词呢？“我今年十三岁”，为什么搜这个词，很多十三岁的小盆友在上面问问题，用这个词作为开头，或者搜“我今年上初一”，效果差不多。 这就是一种人群调研的方式，通过这个方式，可以了解目标人群的一些想法，诉求，和困扰。当然，实际上我们能做的也不多，但是分享这个案例，也是分享一种利用搜索做调研的思路和方法。很多时候，用户提出的问题其实就是你要找的答案，那么你怎么搜索到这些问题？</p>
<p>以前有一个网龙的朋友，当时还是91助手在网龙的时候，没事休假的时候喜欢坐在4399的咖啡厅，那天跟我聊几句，我说你做什么的，他说做91助手用户分析的，我说你怎么做，他说发调查问卷，最近问卷还没回收，所以没事情做，我就说这个做的太累了，为啥要等调查问卷呢？你去知道上搜91助手，一大堆人问关于91助手的问题，你去看看别人问了什么，这不就是用户需求么？你再搜“91助手 垃圾”，肯定有无数人骂你们产品，你去整理一下都是因为什么问题骂你们，列一个excel表格，把最多骂你们的原因列出来，发给程序员，这不就是最好的用户调研么？再搜“91助手 豌豆荚”，肯定无数人在里面做对比，看看哪些人推荐用你们，哪些人推荐用竞品，都是基于什么理由，竞争分析不就出来了？再搜“豌豆荚 垃圾”，“同步推 垃圾”，看看竞品都有哪些问题被用户骂。百度知道是最强大的调研平台，只要你善于搜索和整理。</p>
<p>此外，淘宝指数和淘宝的销量数据也是一个非常重要的数据分析渠道。之前我用淘宝分析过一个特别低调的游戏平台的月流水，当时数据拿出来别人都觉得挺惊讶，后来找他们老板聊天求证了一下，与实际相符度还是相当高的。这个就留作思考题了。</p>
<p>移动互联网火了以后，appannie和distimo是我目前经常要浏览的网站，其中ASO的数据也非常值得看一下。但很遗憾，目前我还没找到在app市场里关于搜索指数的数据。</p>
<p>看不同国家市场的榜单，除了看产品的分布外，用户的诉求构成外，其实如果你善于总结，还可以看这个市场处于什么发展阶段，以及下一步将进入什么阶段，如果有这样的思维意识，对一些新兴市场就会找到一些机会，当然，不同国家市场的差异很大，所以有时候，一些经验未必可以套用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接下来是该主题的第四部分了。&lt;/p&gt;
&lt;p&gt;查看原文，请点击&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&amp;amp;mid=209219802&amp;amp;idx=1&amp;amp;sn=80af0e937c17b0
    
    </summary>
    
      <category term="关注兴趣" scheme="http://azonwan.github.io/categories/%E5%85%B3%E6%B3%A8%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="创业 startup" scheme="http://azonwan.github.io/tags/%E5%88%9B%E4%B8%9A-startup/"/>
    
  </entry>
  
  <entry>
    <title>谈谈创业6</title>
    <link href="http://azonwan.github.io/2017-08-02-2015-09-23-startup-6.md"/>
    <id>http://azonwan.github.io/2017-08-02-2015-09-23-startup-6.md</id>
    <published>2017-08-02T09:32:48.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>现在推出原作者目前在该主题下所作的最后一篇文章。</p>
<p>按照惯例，要看原作的，请点击<a href="http://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&amp;mid=209356925&amp;idx=1&amp;sn=2d4e0da52230a2b58ba8f0e4ebcfb636&amp;scene=23&amp;srcid=0923h3TqpgrUodkVFF6weSnp#rd" target="_blank" rel="external">这里</a>.</p>
<p>今天讲四句口诀，是认识你身边，认识这个市场的一种思维方式，个人整理的。</p>
<p>问题即机会，挑剔即信任，优势即包袱，敌人即帮手。</p>
<h3 id="问题即机会"><a href="#问题即机会" class="headerlink" title="问题即机会"></a>问题即机会</h3><p>如果你是创业者，产品的问题，行业的问题，就是创业的机会，用户的问题，就是你发展的机会。如果你是打工者，企业的问题，就是你的机会。 不要总是抱怨问题，你能把握问题本质，解决问题，你的机会就来了。</p>
<p>我说一些分享过的观点，比如作为投资者，考察一个创业项目，不要求全责备，如果这个项目，团队也好，技术也好，资源也充分，发展速度也好，市场空间也大，请问，咳咳，说句不客气的，你觉得这项目估值是多少？现在的估值是不是已经把所有利好都算在里面了？ 但反过来说，一个项目，技术一般，团队明显有短板，但是运营数据很漂亮，用户数增长很快，可是目前变现能力又非常弱，你琢磨一下，这是不是机会来了，如果这些短板解决了，是不是就捡到宝了？很多明星企业不都是这么过来的么。</p>
<p>思维方式对比</p>
<ol>
<li>这款产品虽然用户数很多，但是做的不够好，所以不值得投  </li>
<li>这款产品虽然做的不够好，用户居然还有这么多，所以太值得投 </li>
</ol>
<p>你觉得应该选哪种？我发现不少投资经理选择1呢。但是我们想想，连投资经理都能看出产品做的不够好，说明这个产品改进空间很大对不对，没改进都有很多用户追捧了，说明上升空间更大对不对</p>
<p>如果你做了一个产品，很完美，没有问题，但是用户都不来，那说明你根子上就做错了，那才叫杯具。</p>
<h3 id="挑剔即信任"><a href="#挑剔即信任" class="headerlink" title="挑剔即信任"></a>挑剔即信任</h3><p>真的骂你很凶的用户，往往是你的深度用户，对你的目标越高，才会失望越大。做生意也是如此，挑货的才是买货的，他真要买了，才会说你东西这不好那不好，他不买看看他才懒得关心这个。</p>
<p>其实职场也存在这个潜规则，从以前军队看也是，看一些当年的传记，被长官天天骂的那才是亲信，你看公司里被老板天天骂来骂去的，往往老板真正信任的人，你觉得老板对你蛮客气，人家可能压根没当你是自己人。</p>
<p>为人父母的更不用说了，大家都懂的。  </p>
<p>所以不管是对外合作，找合伙人，一条条摘你问题，跟你核对条款的，不厌其烦的，那才是真要跟你长期合作的人；什么都答应，什么都好商量的，往往压根就没想长期跟你合作。</p>
<p>在职场的同学也是，被上司，老板天天挑毛病的，打起精神来，不要那么沮丧，老板如果都懒得搭理你，你就可以准备走人了。别玻璃心，说我做的这么好为啥老板还吹毛求疵，要是真这样，说明老板对你的期望很高的说</p>
<h3 id="优势即包袱"><a href="#优势即包袱" class="headerlink" title="优势即包袱"></a>优势即包袱</h3><p>想想那么多科学巨匠，在晚年的时候都成为新的科学理论的阻碍，并不是他们不够优秀，不够出色，而是他们自己的成就成了一种包袱。</p>
<p>为什么这些年行业发展，每次都是新的力量带来变局，而不是传统的巨头? 从微软对IBM，到互联网时代谷歌对微软，诺基亚，到社交网络facebook异军突起，每次都是新的力量。就是因为，传统的巨头，包袱太重了。</p>
<p>中国互联网发展将近20年，我的观察结论是，资源优势方通常是战败的一方，几乎被验证了无数次。十年前，如果一个项目说他背景雄厚，关系强大，几乎可以断定这个项目的死刑。今天这个情况好一点有限。主要因为今天的背景和十年前不一样。（十年前的背景一般是说电信资源，或者是传统媒体资源，今天很多指的是BAT背景，所以今天还是有个别项目可以靠背景活的不错，但死亡率依然惊人）。 为什么资源优势方通常会战败？其实还是因为依赖优势，从而心理上失去了竞争的紧迫性和对产品，用户打磨的耐性。总觉得我资源丰富，可以分分钟用手指摁死对手，但最后往往是不知不觉自己就出局了。</p>
<p>典型案例，千龙新闻网 完败于新浪。<br>（上古时代的案例，很多人不知道当时千龙新闻网来头多大）   </p>
<p>百度恶斗新浪<br>（上古时代的案例，百度和新浪欠费停机门事件翻脸时很多人认为百度死定了）   </p>
<p>易趣完败阿里<br>（上古时代案例，中国最大的购物网站被全球最大的购物网站收购，没有一个分析师会认为这个公司会失败。居然输给了不知道从哪里冒出来的淘宝。）   </p>
<p>今天不细说了。今天看这些结果好像都是理所当然，我们回到那个时代，当时的评论和分析师都是一边倒看好前者的。</p>
<h3 id="敌人即帮手"><a href="#敌人即帮手" class="headerlink" title="敌人即帮手"></a>敌人即帮手</h3><p>还有比周鸿祎更好的案例么？重新激活了昏昏欲睡的百度和寂寞如雪的腾讯，还不断敲打猎豹和小米，中国互联网真应该给周鸿祎颁发个奖状，最佳行业催化剂。   </p>
<p>说个案例，神仙道是页游时代的一款非常成功的游戏，这款游戏的生命周期之长，用户群粘性之强均可堪比端游。   </p>
<p>那么当神仙道爆发没多久的时候，我注意到有一款游戏叫做“龙将”突然出现，收入起来的也很快，从玩法和系统设计上，看的出来和神仙道非常雷同，后来我还真是有机会逐一询问过阿飞（神仙道游戏开发商老板姚剑军），叶斌（神仙道游戏制作人），黄一孟（神仙道游戏运营商老板），结果他们的说法出乎我的意料！（不是同时问的，是逐一不同时间问的）他们都说，龙将做的挺好的，按照互联网常见撕逼大战的剧情，难道不应该破口大骂么？没有！他们都说，龙将做的非常好，甚至说，如果没有龙将，他们觉得这个系统已经做到头了，想不出还有什么优化和改进的东西了，龙将出来一看，有几点改进做的都非常好，他们也觉得学到了东西，对这个游戏的持续运营和优化更有信心了。    </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;现在推出原作者目前在该主题下所作的最后一篇文章。&lt;/p&gt;
&lt;p&gt;按照惯例，要看原作的，请点击&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzI0MjA1Mjg2Ng==&amp;amp;mid=209356925&amp;amp;idx=1&amp;amp;s
    
    </summary>
    
      <category term="关注兴趣" scheme="http://azonwan.github.io/categories/%E5%85%B3%E6%B3%A8%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="创业 startup" scheme="http://azonwan.github.io/tags/%E5%88%9B%E4%B8%9A-startup/"/>
    
  </entry>
  
  <entry>
    <title>用互联网管理方式指导自身计划的执行</title>
    <link href="http://azonwan.github.io/2017-08-02-2016-02-22-how-to-be-successful.md"/>
    <id>http://azonwan.github.io/2017-08-02-2016-02-22-how-to-be-successful.md</id>
    <published>2017-08-02T09:32:48.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>又到了一年之计的春天，又到了展望新的一年的时候。可惜回首望去，却发现去年的，前年的，乃至很多年前的计划还静静躺倒在未完成的清单上。<br>我其实是一个特别喜欢列计划的人，从上初中那时候开始，我就喜欢拿支笔在笔记本上一笔一画的写下近一阶段所要完成的计划，即使是到今天，我仍然要有一支笔常年放在手边，要有一个笔记本常年背在身上，以便于自己可以顺手拿过来写下点自己突发的想法和感触。<br>我对计划有着一种特别的坚持，我始终坚信着“凡事预则立，不预则废”。长远的，近期的，不管是什么，如果没有被纳入到已知的计划之中，我就觉着心底不安。这也许是一个很好的习惯，不过在执行力不足的现实下，一切值得颂扬的习惯都显得那么的无力。<br>很多时候，我都在困惑，自己那么高的热情投入到计划的制定之中，但是为什么在实际执行的过程中就突然变的黯然失色。以至于时至今日，我仍然一事无成。好像面前有一条河，我早上走到河边，梦想着走到对面去观赏着那里的美丽景色，畅想着有鸟语有花香，要是能走过去就好了。但是一直到晚上，我也依然站在这岸望着那方。<br>正是因为这样的经历发生了太多次，我一边对此开始习以为常，一边更加对此感到忍无可忍。我不希望自己永远沉浸在这种一事无成的苦恼中不知所措，我十分迫切的希望走出这样的状态，变成那种一直期盼着成为的那样一个人。<br>若要如此，我需要怎么做？<br>若要那样，我又需要如何改变？<br>改变自己，成为了一个摆在自己面前最需要投入精力，最迫切也最困难的一个愿望。    </p>
<h3 id="为什么自己总是无法坚持"><a href="#为什么自己总是无法坚持" class="headerlink" title="为什么自己总是无法坚持"></a>为什么自己总是无法坚持</h3><p>对于我们来说，发现问题并不难，难的是如何改进它，并让它从此永不再见。要想做到这一点，可能我首先需要做的一件事情就是客观的分析一下自己。<br>我一直都知道自己应该做什么，我有决心，也有动力，所以我能够十几年保持着做计划的习惯，那些曾经想做到的事情在现在仍然是我所想要去实现的。但是为什么最终却没能坚持着做下去呢？如果能够找到这个原因是不是就意味着我能够摆脱现在这种一事无成的生活状态了呢？<br>就我而言，在计划着做一件事情的时候，是最有动力的。我会畅想着完成之后的种种令人欣喜若狂的场面,越想就越觉着兴奋，难以抑制。恨不得每天不眠不休，马上完成。但是随着具体的执行，这种热情就开始逐步的减退。会被各种各样其它事情打断掉原本的节奏，会想着去多休息一会，会想着放松一下，每天的任务即使没有完成也不会感到不安。这种状态再持续两三天之后，热情就已经慢慢的转变成了漠然，甚至会忘记当初做计划那时候的兴奋之情，再接下来的情节就开始显得俗套，曾经让自己无法自制的计划就这样搁置下来。或许在后来的某一个时间里，心里会突然想起来还有一件让自己兴奋难当的事情没有完成，应该马上去做。上述的这个过程就会完整的重复出现一遍，也可能是几遍。<br>不能坚持到底，没有毅力，缺乏自制力，成为了最为直观的表象。<br>但是我也有很多能够坚持下来，甚至是不自觉就会去做的事情。比如说刷微博，朋友圈，看小说。做这些事情的时候完全不需要计划。我相信大部分人都是一样的，但是不知道大家有没有思考过这个问题。可能有时候，想要持之以恒的做一件事情，其实还远没有上升到毅力，自制力，执行力这种高度，我们需要做的无非就是一个将其转变成一种我们无法离开的行为而已。<br>那些多年来始终想要去实现的事情始终还是停留在todo列表中，我已经无法容忍这种状况继续发生。为了从根本上去解决它，我开始通过各种渠道来找寻方法。购买客服拖延症和时间管理相关的书，听成功学相关的讲座，到网上查阅相关的文章和评论。不得不说，通过这些渠道，我确实还是学习到了很多听起来切实有效的知识观点。<br>但是如何让这些学到的方法发挥出应有的作用，真正可以被应用到实践之中，或许才是自己最应该关注的内容。否则我所学习到的所有内容就会沦为充斥在网络上无数的鸡汤中的一碗。<br>接下来，我会先把这些所学习到的方法，与自己的想法以及思考相结合起来，加以整理，成为一篇指南性的方法。然后将其应用到自己的实践之中。有句话叫“失败一定有原因，成功一定有方法”。我首先要做的就是总结出适用于我自己的方法。</p>
<h3 id="如何才能成功的做成一件事情"><a href="#如何才能成功的做成一件事情" class="headerlink" title="如何才能成功的做成一件事情"></a>如何才能成功的做成一件事情</h3><h5 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h5><p>因为我一直混迹在互联网行业里，所以会接触到很多互联网领域里的管理思想。这两年里，互联网思维突然升了温，成为当下最热的词汇。不得不说，互联网领域里确实有着很多先进的理念，是值得大力推广到其他领域里去的。而这些年里，我一直想做的一件事情，就是把互联网行业中的常用管理方法推广到生活中的方方面面，让其在其他领域里面一样能够发挥出作用。下面，我就简单的概述一下在互联网这一行业内对项目的管理方法。<br>互联网的行业里做项目开发，一个完整的项目管理流程，可以分为启动，规划，执行，监督，收尾。事实上，这个流程可以适用于所有行业，所有行为。<br>如果我们产生了一个想法，想要去实现一件事情。这就是启动阶段。<br>有了目标，肯定还是需要思考要怎么去做才能将其实现，会进行相应的分析以及计划。<br>做好了规划，接着就是具体的去实现了。这也就是按照规划展开执行的过程。<br>执行的过程中，到底做的怎么样，我们同样也就需要一个控制监督的过程。<br>按照上述的执行过程，将开始时罗列的计划一个一个实现，我们想要做的事情终于到了收获的时刻，圆满的完成了。<br>回过头来，看一下上述的这个流程，仿佛任何一件事情都是可以放置在其中，而且毫无违和感。那么，如何才能成功的做成一件事情，仿佛终于可以有了一个可衡量的流程，现在对于我们，需要解决的问题就变成了如何科学合理的运用好这个流程。    </p>
<h5 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h5><p>当我们产生了想要去做成一个事情的时候，启动的过程其实就已经开始了。<br>可能很多人会觉着，有了想法，启动的这个过程也就算是可以告一段落，进行下一个环节了。拥有这种思想的人估计肯定不在少数。但是，它到底对不对呢？我的想法，可以认为它对也可以说它不对。区别在于我们是不是希望这件事情做成功，如果真的很希望实现这个想法，在启动这个阶段，我们需要做的事情还有很多。<br>这些年来，我已经产生了不计其数的想法，想要去实现数不胜数的计划。我可以十分确定，大家一定都是如此。大家也一定很希望知道，在特别想做成功一件事情的时候，我们在产生了想法之后还应该去做些什么。<br>首先，我们要明确自己的目标。想要做成它，但是需要做到什么程度才能算得上是成功了呢？这是我们需要在一开始就明确的，要不然就会变的没有方向。很多时候，我们不得不相信，定性永远还是会比定量更为有效实用。<br>在明确了目标之后，接下来我们要给自己找到一个不得不去做的理由。我一直相信，到底能不能成功，主要就是看你到底有多么想要成功。如果我们有着不得不成功的理由，在毫无退路的情况下，往往就会爆发出远超自己想象的力量。<br>在我刚刚加入工作，踏入互联网行业做程序开发的时候，因为经验的缺乏，编程能力也相对一般，每次在开发项目的时候都感到困难重重，也经常会被上级领导呼来喝去，批评训斥。那段时间里，我的生活变的单一乏味又充实有压力，为了让自己能够尽快的跟上工作上的要求，不至于突然有一天被通知已淘汰，也是为了能够尽快的摆脱掉当前的这份工作压力。我将自己所有的精力都放在了学习编程技能上面，远离了一切有可能让自己分心的事情。在这种状态下，我开始抑郁，开始痛苦，但终于还是坚持了过来，慢慢的，工作也开始游刃有余起来。即使到了今天，我在开发上所应用的知识能力还是在那段时间打下的基础。<br>这段经历对我来说极为宝贵，我也在不同的时间地点谈论了很多次。它其实一直在提醒着我，想要成功，主要就是看你到底有多想去成功。如果我不是必须得通过学习掌握开发的能力，我就没有办法继续维持着这份工作，这就是我的非做不可的理由。<br>决心固然重要，但是决心也要实事求是。这就需要我们来客观的对自己的目标进行分析，明确自己来做这件事情的优势和不足，以及在真正去实施的过程中有可能会遇到哪些困难。这个步骤也是很重要的，正所谓有的放矢，不外如是。经过自我分析，你发现其实自己并不是一定要实现这个计划，或者说面对那些想到的困难，完全没有任何应对措施，我们其实也就没有必要再去进行投入了。<br>理清楚了自己的优势，可以增加自己完成整件事情的信心。了解了自己的不足，也就明确了自己要在哪些方面更加努力，否则它们早晚会变成阻碍自己走向成功的绊脚石。大致的考虑到实施过程中会遇到的困难，这样我们就可以提早进行准备，防患于未然。<br>也许有的朋友会说，还没开始，我怎么可能想得到这么多。具体会遇到什么困难，有可能如何去克服，这都是需要在具体的执行过程中才会发现的。这种说法也对，难道带着这样的想法，我们就没有什么可做了么？当然不是。我们可以通过各种渠道去收集别人做这些事情的过程，看看别人都遇到了哪些困难，又是如何解决的。通过了解别人的经历，我们可以找到很多有价值的信息，加以借鉴，加以参考。甚至还可以向其求助。<br>我们可以通过不计其数的渠道了解到其他人做一件事情成功或者失败的案例，心灵鸡汤，微博，朋友圈，名人传记，朋友间交流，能够让我们获得相关信息的渠道真的是数不胜数。很多人更多的会将这些故事当作一种激励，也有很多人会对其不屑一顾，但实际上，这些故事中最有价值的部分不是结果，而是大家在执行的过程。只要我们有心，我们就可能会从中获得足够多的启发。这也就是我们会比这些前人更有可能走向成功的关键。<br>明确了目标，拥有着非做不可的理由，对自己进行了客观的分析。仿佛一切准备工作都已经齐备，现在就可以进入到下一个环节了。事实上，上面所述的种种这些方法，在以前的经历中，我们其实也都在这么做，只是可能没有这么系统的总结出来。但是为什么还是不能保证成功呢？关键就在于系统的去做和无意识的去做。如何保证这个过程变的系统化，就是我们需要在启动过程中要做到的最大的核心。<br>做项目要写计划书，我们要做到系统化也需要写计划书。把经过深思熟虑后沉淀下来的目标，理由，相关的客观分析，有可能遇到的困难及相应的应对措施等等因素，统统的落实到文字层面上。千万不要忽略这个过程的重要性，把想法转变成了文字，从此就变的有据可查，不管过了多少时间，当你再一次查阅这段文字的时候，都会给你带来不一样的思考，如果你的想法发生了偏移，它也会对你的决定产生很大的参考价值。        </p>
<h5 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h5><p>在互联网项目管理里，规划这一过程主要就是任务分解与安排。我们每实现一件事情，它都是由多个任务构成，我们逐个完成了这些被分解成的任务，整个计划也就会圆满完成。<br>任务分解，对于我们来说并不陌生。尤其是那些做过项目的朋友们，更是如此。任务分解，其实就是写todo list，列出来每段时间要实现的计划任务。一般情况下，我们是怎么来做任务规划的呢？可能大家都听过那个“把大象装冰箱总共分几步”的笑话，通常，大家作任务分解，计划安排应该就是这样的一种模式。<br>举个具体的例子来说吧，我现在正在整理互联网项目管理方面的知识，希望在接下来的一段时间里，将这个想法系统的归纳总结成一个方法体系，用来推广到生活的其他方面中去。现在，我想读一本关于项目管理知识体系的书，一般情况下，我们会怎么做任务分解呢？   </p>
<ol>
<li>第一天，学习前100页   </li>
<li>第二天，学习第101页到第200页  </li>
<li>第三天，学习后100页<br>初步看起来，好像没什么问题。时间，任务量，要完成的目标，在这份计划中都得到了体现，仿佛每一个指标都能得到量化。这或许的确已经是一个比较好的计划列表了。但是如果我们把要求再提高一点，这份任务列表还可以在哪些方面提升它的价值，或者换一个说法，做任务分解的时候有哪些需要注意的事项。    </li>
<li>任务清单不要过长过多<br>被罗列到任务清单上的内容都是必须要完成的，而且是必须按时完成。要是清单上的内容多到让人望而却步，最终完成不了，就失去了任务清单的作用。而且长此以往，我们就很容易产生一种挫败感，更加会影响自己按照计划执行的动力。            </li>
<li>任务要有能够量化的指标<br>什么叫做能够量化。像是上面我所列出来的计划，“第一天，学会前100页”，有时间有结果，这就是可以量化的内容。但是这种量化的指标却远远没有办法验证，第一天，是上午还是晚上，学会前100页，怎么样才能叫学习，看完了就可以，还是需要能够理解其中的含义，可以融会贯通。所以，在制定规划的时候，我们需要将完成时间指定到具体的时间点，目的要明确到可以被具体指标衡量的程度。要是按照这样的标准，上面的计划可能就会变成这样，“第一天晚上八点前，阅读完前一百页，结合自己的理解，总结一份学习笔记，发布在自己的博客上”。  </li>
<li>完成的时间要经过深思熟虑<br>上面提到了，放置在任务列表中的内容都是必须要按时完成的，否则，任务列表页就失去了它存在的最大价值。这也就对我们在列计划的时候提出了严格的要求。<br>《微时间管理术》这本书中给我们提供了一个很好的建议，应该只给每天列出5条必须完成的任务，最好还要列出每天不管怎样都不要去做的5件事情。因为在他看来，人的精力有限，每天能做好5件事情已经是一件极为了不起的事情了，再多的话，就只能是体现你的愿望，而不是客观实际了。为什么还要列出来绝对不要去参与的5件事情呢？这是一个很好理解的观点，只不过很少有人会这么明确的提出来，这会时刻提醒大家要把精力投放在正确的事情上，而不是过多的分心，导致重要的任务完不成。<br>那么，我们应该怎样来制定这5项任务呢？这就需要大家首先要理清楚任务与任务之间的相关联和重要性。在IT项目管理里，有一个词叫做优先级，说的通俗点就是重要的程度。在一个计划中，总是会存在核心的和锦上添花的内容。对于整个计划，如果其中的一个环节不做完，其他所有的任务都无法进行，这种的任务就是优先级最高，我们就要在第一时间去完成它。<br>除了确定优先级外，任务的执行时间也是一个很讲究的因素。不管是在工作中，还是在生活中，可能大家都会有这种体验，你明明下定了很大的决心要去完成一个计划，也开始很专注的执行着，但是总会有一些计划外的事情找到你。电话响了，有人找你去开会，朋友拜访，也可能是自己突然想放松，上网浏览点体育新闻，娱乐新闻，刷刷朋友圈，微博…这种种情况都会对你计划的执行带来打击性的后果。或许大家都深受其苦，却又不知道该如何解决。毕竟上述这些现象并不是我所能控制，想要怎样就能怎样的。<br>我就是一直沉浸在这种痛苦之中无法自拔，后来在《rework》这本书中找到了卓有成效的办法。其实说出来感觉也很简单，就是在时间安排上做文章。把那些需要安心不能被打扰的任务尽量安排到清晨或者夜晚，因为这两段时间是最不容易受到其他人打扰，而且对于个人也是最容易安下心来做事情的。    </li>
<li>要足够的细化<br>任务分解，很重要的一点是尽可能的分解到足够细。大家应该都会同意，对于一个计划，你考虑的越全面，应对的方案越优化，在你具体去实施的时候就会越轻松，至少不会那么容易就被意外打个措手不及。而且，在详细分解的过程中，我们思考的越详细，就越容易发现细节性的问题，就越容易发现隐藏的风险，也就能及时的做出应对的措施。<br>还是以上面读书为例子。我原本的计划是这样写的，“第一天，学习前100页”。这个计划就有点过于概括，在真正去读书的时候可能就会遇到意料之外的问题。这时候我还不知道前100页都有哪些内容，共分多少章节，如果到第100页的时候，这一章没有结束怎么办，要是前一章到第99页的时候就结束了怎么办，要是这100页的内容对我来说特别难，我无法按时看完怎么办，要是这段内容，我不感兴趣，不想读下去了怎么办…天哪，完全不敢再继续往下想了。<br>如果不去细化这份任务，我们一定不会想到，原来如此简单的一个计划，竟然有可能会遇到这么多困难。由此也能发现，详细的去分解一个任务，对我们后续执行会产生多么大的影响。如果这一步做的好，接下来的步骤就会变得相对清晰，易于展开。      </li>
<li>总结和调整一定不能忽略<br>上面也说了，任务要有可以量化的指标，时间是一个很重要的量化指标，哪个时间段来做，做到什么时间截止去展开下一个计划，这都应该在任务列表中得到体现。我们制定完了任务列表，但是执行的情况到底如何，要不要检验一下呢？当然要。有人或许会说，这不应该是监督阶段才应该考虑的事情么。这的确可以被看作是对执行情况的监督，但并不影响在规划阶段将其列在计划中。作为计划中的一项，并且明确每天做总结的时间，监督总结就会变成一个每天不可忽略的过程。<br>至此，如何有效的做规划，差不多就完成了。按照刚才所讲述的方法，还是给3天看完《项目管理知识体系指南》这个例子做出一个计划，会是一个什么样子的呢。<br><table><br><tr><th>日期</th><th>时间</th><th>计划内容</th><th>备注</th></tr><br><tr><td>第一天</td><td>5:30-7:00</td><td>读前三章内容，弄明白项目，项目管理，运营管理，项目经理，项目管理知识体系等概念，明确项目组，干系人在项目管理中的作用，明确项目管理的五大过程。做好相关的笔记。</td><td></td></tr><br><tr><td>第一天</td><td>22:00-23:00</td><td>回顾早上学习的前三章内容，结合自己的理解，做一篇总结，发表在个人博客上，并分享到朋友圈中。对今天的学习过程做一番回顾，有没有遇到学习上的困难，有没有产生自己的思考，这个学习计划是否需要调整，如果需要调整，明天的计划应该是怎样的。</td><td></td></tr><br><tr><td>第二天</td><td>5:30-7:00</td><td>学习项目的整合，时间，成本，范围这四个过程，明确其中的通用做法，注意事项，做好笔记</td><td></td></tr><br><tr><td>第二天</td><td>22:00-23:00</td><td>回顾昨天和早上学习的内容，看看有没有遗忘或者新的理解。查看自己分享的博客，有没有收集到朋友们的反馈。结合自己在工作和生活中的实际情况，再写一篇博客，分享出来。总结这个学习方法的优劣，好的继续发扬，不好的及时更正。</td><td></td></tr><br><tr><td>第三天</td><td>5:30-7：00</td><td>学习项目管理中的质量，人力，沟通，风险，采购这后五个过程，明确其中的注意事项，通用方法。做好笔记。</td><td></td></tr><br><tr><td>第三天</td><td>22:00-23:00</td><td>回顾前两天的学习情况，博客的反馈情况，看看有没有新的收获。结合自己的工作，生活实例，加之自己对项目管理的理解，写一篇完整的总结。并对这次的读书计划做一个完整总结，检验这个方法的可行性以及整理出改进的方法。</td><td></td></tr><br></table>    <h5 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h5>不论是准备的多么充分，都是在为执行阶段做铺垫。大多数情况下，大家的计划完成不了的最根本原因就是执行力不够。而所有的成功学理论，时间管理方法，项目管理体系，重点在解决的问题，归根结底也就是在解决执行力的问题。<br>但是大多数的理论方法中，提高执行力更多靠的还是精神疗法和鸡汤口号。比如，“要提高执行力，就必须树立起强烈的责任意识和进取精神”，“要从改变心态做起”，“需要坚持不懈的毅力和决心”，“有志者事竟成”，所以很多自我激励大师告诉我们，每天早上起来都要对自己大声呼喊一声，“我是最好的”，通过不停的自我暗示和催眠来提高执行力。<br>当然也有通过客观分析，找寻背后原因，并总结应对措施的。比如我在知乎上找到的“如何提高个人执行力”的文章，有网友如此回答：<br>执行力不强，很多情况是因为目标设定不清晰导致的：<br>一个无法执行，超出了个人能力的目标<br>一个过于远大，无法衡量结果的目标<br>一个执行周期过长，不能分解和控制的目标<br>一个不具备执行条件的目标<br>其次，执行结果不够有足够的吸引力，没有行动的动力，如果不能完成，没有响应的惩罚。<br>我其实在一定程度上也是赞成这名网友的观点的。但是，除了定下的目标不具备实现的条件之外，是不是还有其他的原因。让我们来回顾一下自己曾经写下的计划，做出的承诺，从最开始的信誓旦旦，慢慢变的不闻不问的过程，是怎样一步一步形成的。<br>还是以上述的读书为例吧。写下计划的时候，一定是满怀激情的，这也可能是兴致最为高涨的时刻。带着“明早上一定5点半起来看书“的信念，再刷了一会朋友圈，然后关灯睡觉。当第二天清晨的闹钟，在5点半的时候响起，自己迷迷糊糊的睁开眼睛，发现根本没有办法清醒过来，太困了，再睡一会吧，6点起来看一个小时，一本书的前几章都是概念，了解了就可以了，一个小时足够了。然后就闭上眼睛再睡了过去。等到眼睛再次睁开，6点半了，赶紧起来看两眼。拿起书本，跳过前两章，因为都是介绍，以最快的速度看了10页，七点了。剩下的等白天工作空闲的时候再看吧。其实白天工作的时候已经完全的忘记了这件事情。时间来到了晚上10点，再刷一会朋友圈就来看书，反正也就只剩下第三章后半部分了，一会就看完了。等到朋友圈的信息看完一遍，竟然11点了，不行啊，得赶紧看书了。拿起书翻到早上剩下的那部分，随手翻过去了两页，顺手再拿起手机来看看有没有新的回复，这样的过程不断上演，时间也不知不觉过了十二点。哎，这么晚了，觉着困了，今天就先看到这吧，明天可不能再像今天这样，一定得多看点，把今天落下的进度都补回来。等到第二天的五点半，闹钟响起来的时候，原本熟悉的故事情节也毫不意外的重播着。就这样，那些兴致勃勃作出的计划，从此走出了要去实现的范畴。拖延症，再一次完胜了我们。<br>我们再来想想那些我们能够坚持下来并且能够最终完成的事情。<br>记着小学的时候做作业，第二天要交，不管现在还剩下多少没有完成，时间已经多晚，都会在父母的陪伴下一点一点的做下去，直到完成为止。<br>工作过程中，尤其是在项目快到deadline的时候，加班的现象往往都是最重的。这个时候，项目负责人会不停的过来催促进度，甚至干脆就坐在你的旁边不走了，其他同事们也分散在自己的周围不停的工作着，相互鼓励，相互促进，在这种环境下，我们的拖延症终于变得不再那么强大可怕，项目也终于能够按期完成。<br>刷微博，逛朋友圈，这个就更厉害了，根本不需要任何动员，也不需要任何规划，它们已经成为了我们每一天里无意识状况下就要去做的事情，几乎快要转变成了一种习惯了。即使你强迫自己不要去做，似乎也是一件很困难的事情。<br>如果仔细去思考，我们会发现，原来还是有很多事情是能够让我们保证执行力的。既然如此，要更好的提高自身的执行力，我们可以先来分析一下这些事情是如何让我们战胜拖延走向成功的。  </li>
<li>非做不可的理由<br>不管是小学时候需要上交作业，还是工作中项目要交付。对我们来说，都是非做不可的理由。<br>正是因为有着这样的理由，我们的动力才能够变得足够。虽然这种动力更多的是以被动的形式出现的。有句话这么说，“你是想要成功，还是一定要成功。”如果我们非成功不可，那么，不管你要做的事情是什么，它都一定是能成功的。    </li>
<li>拥有能够促进自己坚持下来的环境<br>为什么工作中，项目交付日期之前，我们往往能够做出拖延了很久也没能完成的功能。我觉着有这么几个原因，项目负责人会不停的提醒我们必须要完成，同事们都在努力，自己置于这样的环境下，自然而然的也就跟随着如此了。我们可以说这是榜样的力量，也可以说是群体效应，总之这就是环境带给我们的力量。      </li>
<li>习惯<br>我始终还是不能明白，刷微博，微信为什么能够占据我们生活中那么大部分的时间和精力，真的已经越来越像是一种习惯，不管你是有意还是无意，都会拿出手机低着头，沉浸在其中，无法自拔。如果我们做事情能够有这样的热情，应该没有什么是不能实现的了。<br>“存在即合理”，任何一个现象的背后都会有一个合理的解释。微博，微信，最主要的功能沟通，是交流，但是我觉着它们火起来的原因，更多的还是因为它们能够保持大家对一个圈子的关注，不管是分享自己还是阅读别人的分享，都是在释放着关注与被关注的需求。我们能够通过看别人的分享知道朋友们的兴趣关注点，了解到当前的社会形态，潮流趋势，也能通过自身的分享告诉大家，我并没有脱离大家，我也有着同样的兴趣爱好。正是因为有着这样的需求，而这种社交网络又刚好可以很好的解决大家的问题，所以大家就变得越来越离不开它。<br>如果我的理解是对的，那么我们想要保证执行力的的办法，可能就应该从以下几个方面入手。    </li>
<li>时刻提醒<br>不管是如何非做不可的理由，如果不能经常的出现在自己的思想里，我们就会慢慢弱化它的重要性。我们并不希望每次都是等到deadline，加班加点的赶工。就像是小时候赶作业，工作中赶进度那样。这些事情之所以会呈现前松后紧的现象，主要还是因为在前期对它的重视不够，而之所以在最后时刻能够爆发出不可思议的力量，投入超出平时几倍强度的精力，力保按时完成，并不是因为自己突然顿悟，更多是来自于周围人时刻存在的监督提醒。如果不是父母陪伴在身边同你一起熬到深夜，如果不是项目负责人和相关同事不停的催促压迫，我相信我们一样还是无法迸发出那么巨大的能量，能够一举将拖延了多天的进度瞬间完成。<br>所以，营造出一个能够给自己带来压迫感，能够不断提醒自己要坚持下去的条件。<br>将自己非做不可的理由写下来，放置在时常可见的地方，时刻提醒自己。<br>公开做出承诺，并且时时更新进展，接受所有关注自己的朋友们的监督。<br>制定一定的奖励和惩罚，加深自己对整个计划执行情况的期待。    </li>
<li>营造竞争互助的环境氛围<br>有时候，我们会觉着个人的力量是渺小的，我们很容易受到环境的影响。<br>我并不是一个拥有强大自制力的人，很多时候我都很容易感觉到疲惫，产生懈怠，进而就会被拖延症轻易俘获。<br>想要解决这个困局，光靠自身的执行力看来是不可行了。那我们就得借助于环境的力量，榜样的力量。以前，我听过这样一句话，“你想成为什么样的人，就得多跟这样的人接触。”在同这些人朝夕相处的过程中，我们就会更多的了解到他们的行为习惯，很容易被他们的优秀品质所带动。潜移默化中，我们就会变得同他们越来越像，越来越优秀。<br>在现实中，可能这种榜样并不是特别的好找，即使找到了，也很难获得同他们接触的机会。每个行业中都会存在着一些偶像，IT界有比尔盖茨，扎克伯格，投资界有巴菲特，足球界有梅西，C罗，娱乐界众多明星，其实我们就是想成为他们这样的人，可是对于我们普通人来说，我们是不会有机会同这些人直接接触的。但是他们的故事却并不难找，媒体上关于这些人的新闻永远都是不缺乏的，我们可以将其作为榜样，在做事情的时候，自动的将自己带入到他们的世界里，进行着对比，我是这么做的，他们会那么做，他们一天就完成了，我一天却只完成了十分之一。经过不停的对比，我们的提升也就慢慢的体现出来了。<br>“孟母三迁”的故事，我相信在上学的时候，是每一个人都会听到的启蒙故事。环境，对一个人的成长的确至关重要，对一个人执行计划，也同样十分重要。如果你觉着自己很难静下心来专注的做一件事情，你可以到学校的自习室里去，或者图书馆里去。如果你想感受一下创业的激情和氛围，你可以到北京中关村的那些创业咖啡馆里去。如果你想学习一门外语，你可以加入到各地组织的英语角…说起来，这样的环境有很多，不管是什么类型的计划，只要你想去找，就一定能找到有助于自己的。    </li>
<li>维持关注度<br>上文提到了微博，朋友圈，这些根本不需要强制自己却仍然无法自拨的事情。在我看来，它们之所以有这么大的力量，很大一部分原因是自己周围的所有人都是如此，大家借此来释放着关注与被关注的需求。<br>我们想成功的完成一些计划，若是也能保持着这样的关注度，就能很大程度上保证计划成功的可能性。<br>那么，有什么办法来帮助我们维持着这样的一种关注度呢。我认为，关键因素就在于公开透明。<br>把自己制定好的计划，分享公布出来。不管是发布在朋友圈，微博中，还是通过朋友之间聊天交流透露给朋友们，都可以起到将其公开，接受大家关注的作用。这样，我们就可以接受来自于朋友，公众的监督鼓励，提升完成的可行性。比如说，我告诉大家我要写本书，并将这个计划公布在了我的博客里。这样，订阅了我博客的朋友们，对其有期待的朋友们就有可能在以后的某一个时间里询问，这本书的进度。这会给我带来一种压力，也是一种动力，这将促使我坚持下来，直到完成。   </li>
<li>频繁的总结调整<br>维持关注度的另一方面，就是坚持总结，最好是每天都做总结。<br>这样做的好处是，最大程度上保证了自己对整个任务的专注，也能及时的发现这个任务执行情况的好坏，是不是完全按照计划进行，有没有需要改进的地方，是不是遇到了挑战，有没有实现上的风险。只有通过不断的总结，才会有改进的机会，才会有最终成功的可能。<br>管理学中有一个通用模型，叫做戴明环，也叫PDCA循环。P表示计划(Plan),D表示执行(Do)，C表示检查(Check),A表示行动(Action)。它最早是由休哈特于1930年提出，并在1950年的时候，被美国质量管理专家戴明再度挖掘出来并加以推广，应用于持续改善产品质量。这个模型应用的极为广泛，差不多贯穿在互联网领域的方方面面，在其他行业中也同样有着普遍的应用。按照这个理论，任何一件事情的最终成功，都是戴明环的循环过程，而能够促使它旋转循环起来的关键就在于检查上，只有通过不断的总结检查，才能发现问题所在，才能促进它的健康发展。<br>频繁总结，重要性其实不言而喻。但是如何来做总结，会比较好。上文其实也提到了，要每天晚上睡前写执行总结，并将写完的总结公布出来，顺便将计划的进度变化一起公布出来。这样，既可以让自己更好的执行，也会促进朋友们对自己的关注度，从而更好的对自己进行监督，成为一个良性的循环。<br>其实，慢慢的，我们会发现，对于一个事情本身，它的结果固然重要，但过程反而显得更有价值。我们可以通过对一件事情执行的过程的分析，找出更为合理的解决方案，也可以给自己甚至别人以启发。很多时候，在面对一件事情时，我们会无助，会茫然，根本原因是没有经验，不知道如何展开。要是这时候，你被告知，或者是你通过什么途径得知，某人曾经做过类似的事情，他当时是这么做的，你一定会高兴的跳起来，即使他最终失败了，但是这一定不影响你的心情。<br>所以，将执行的过程记录下来，频繁的总结，这就是你做一件事情的最大的贡献。一定不能忽略它，如果你坚持的这么做了，在未来的某一天里，你一定会感激自己曾经的这个做法的。      <h4 id="监督"><a href="#监督" class="headerlink" title="监督"></a>监督</h4>这个过程，其实与执行过程是同进同退，同时进行的。<br>我们有了目标，定了计划，展开了执行，但是实施的效果如何，是不是都能按照计划顺利进行，是不是需要有所调整，这些就需要靠监督来保证。<br>在项目管理里，项目经理会每天来统计项目进度，更新项目状态。也有的会每天开一个总结会，所有相关的人聚在一起，大家汇报一下项目进展，讨论遇到的困难。质量测试环节，也是监督的一个重要体现。可以说，监督这个环节，是保证任务能够按照计划顺利进行，最终走向成功的极为重要的一环。<br>那么，在我们完成自身计划的过程中，我们可以有哪些方式来保证监督的进行呢？    </li>
<li>永不间断的提醒<br>上文说到了，想要完成一个计划，需要有非做成不可的理由。这个理由就是能够支撑自己在千难万难中仍旧可以坚持下去的动力。<br>但是，我们也不能否认，随着时间的流逝，我们很可能会走着走着，就已经忘记了当初所下定的决心。曾经那些兴奋难当，非做不可的理由，都有可能会褪去颜色。在这种情形下，我们完成这个计划的动力也就变的越来越淡薄了。<br>永不间断的提醒是十分必要的。我们要时刻的告诉自己，有一件非做不可的事情，排在自己的计划列表中。在IT项目中，每天的总结，进度更新，其实都是对大家的提醒。<br>想要做到时刻提醒，我们可以将任务列表，实现的理由，完不成的后果，完成的奖励都罗列出来，放置在醒目的位置，保证自己每天都可以看到，这样就可以时刻的提醒自己绝对不可以松懈，延缓激情褪去的时间。<br>很多人也经常会做类似的事情，他们把计划列表，或者是励志口号写出来，张贴在墙上，时刻关注。但是效果却并不是总能达到大家的预期，还是会在一段时间过后，就变的再也无法坚持。<br>面对这种情况，我们需要明白，光有口号的提醒对我们成功完成一项计划是远远不够的。我们还需要有实质性的激励方案，比如说奖励，比如说惩罚。要有足够的刺激，才能保证计划始终在我们心中保留着足够浓厚的色彩。<br>上述的方法是从自身上下功夫，是属于内在的监督。但有时候，我们还可以通过外在的监督来达到更好的效果。<br>贴吧，豆瓣，微信朋友圈里，我们可以看到大量的签到贴。大多学习类的APP应用中也都会提供签到或者打卡的功能。这一功能的使用，更大程度上是让自己感受到来自于平台的监督，也能更直观的看到自己这一段时间的坚持和努力。尤其是在你已经坚持了很长一段时间之后，你就更加不愿意轻易放弃自己这么多天不间断签到所积累的连续性。在拥有了这样的心理暗示，我们就已经得到了提醒所能带我们的全部了。    </li>
<li>执行过程公开透明<br>上面说到了提醒，可以在很大程度上促进大家对计划的坚持。但是执行的情况如何，又能通过怎样的手段来监督呢。<br>最直接，最有效的方法，就是将整个执行过程中公开透明，让所有关注自己的人，可以随时，全面的了解到自己的执行情况。这样，我们很有可能会收到来自于朋友们，关注者们的关心和鼓励，每当大家来询问，那个计划执行的如何了的时候，我们就会感受到完不成的压力，同时更多的还能感受到大家的支持和鼓励，带有着这样的心态，我们就会觉着自己有义务必须把这些计划完成，不管会遇到多么大的困难。<br>我有一个十分不好的习惯，我特别的低调。所有事情在没有成功之前，我都不希望别人知道。一直以来，我都认为这是无可厚非的，自己的计划本不需要让那么多人知晓，如果大家都知道了，就有可能会给自己带来很多额外的打扰。这些年来，我默默的制定了数不胜数的计划，毫无例外的，他们最终都没能坚持到成功来临的那一刻。通常，在计划执行了一段时间之后，突然会懈怠几天，然后就会无限期的停滞。我也曾为此而苦恼困扰，现在我开始明白了，如果我真的想做成他们，就不应该只是默默低调的去进行，而是应该将其公开，主动的来承担大家对我的监督。<br>讲到公开，有很多的方法都能帮助我们达到这一目的。我们可以公布在朋友圈，微博，博客中，可以告诉好朋友们，可以在豆瓣，贴吧这种公众平台中发布动态。如何公开并不是重点，重要的是不能让计划只有自己一个人知情，我们需要一个能够给自身带来关注压力的环境，这样，在我们想要放弃的时候，我们就没办法如以前一样那么随意，那么轻易，那么无所谓。  </li>
<li>频繁的反馈总结<br>其实，监督的目的更多的就是保证大家始终走在正确的道路上，不要在不知不觉中误入了歧途。与其全力去做一件注定会没有结果的计划，或许反倒不如在一开始就不去实施。要是从这个角度来说，通过频繁的总结反思，就应该是我们最应该投入的监督手段。但是很可惜，这个过程，总是会成为我们投入最少的一环，有时候，是不重视，有时候是主观的忽略。我们在规划阶段就已经把任务做了分解，也明确了每一个任务所应该达到的目标，可惜在现实中，我们甚至都不会主动的去对照原本制定好的任务目标，我们习惯着我行我素，美其名曰成个性昭彰。在这种状态之下，失败也注定会成为我们时常碰面的不速之客。<br>最直观的监督，就是刚刚提到的，时常将现阶段与制定好的规划作对比，是不是真的在按照计划有条不紊的进行着，是不是每个环节都在顺利发展，如果是顺利的，下一步要做的事情就可以展开了，要是不顺利，困难在哪里，需要如何克服，计划是否需要相应的调整。按照这样的节奏下来，我们会发现原来做的规划竟然真的在起作用，看似庞大困难的任务也在一步一步的接近着成功。<br>如何有效的进行总结，最好的办法就是将整个执行的过程完整的记录下来。除非根本没有去做，否则我们一定会有很多细节值得自己去书写。不管是在上学的时候，还是在现在的工作中，我们总是能够听到这样的话，想要知道自己有没有掌握这个知识点（或者是技术），最好的办法就是讲给别人听。能够把它讲清楚说明白了，就说明自己是真的掌握了。而且在向别人讲述的过程中，也是一个能够给自己带来提升的机会。这个过程，其实就是反馈总结自身的过程。<br>我一直这么认为，大家很认真很努力的去完成着一个任务，它最终是否成功并不是最重要的，最有价值的部分其实是认真执行的这个过程。因为我们做过，我们就有了相应的经验，我们为了它思考过，努力过，拼搏过，即使最后是失败的，它仍然给我们留下了足够的积累和沉淀，足够到我们可以不那么费力就能够重新站起来。<br>我对这个观点深信不疑，以至于现在每做一个计划，我都习惯性的通过各种途径在找寻相关案例，希望从别人的类似经历中找到启发。不管是成功的还是失败的，都必定会带来巨大的借鉴价值。这些相关案例如何得来，不正是我们频繁的总结而来么。如此有价值有意义的事情，其实最是能够体现我们成就的。<br>所以，从现在开始，我们要养成一个习惯，要时刻有意识去总结自己，并把详细的内容记录分享出来。若是坚持下来，得到的回报一定不会让大家失望的。  <h3 id="收尾"><a href="#收尾" class="headerlink" title="收尾"></a>收尾</h3>经历了启动，规划，执行，监督诸多环节，终于来到了收获的时刻了。<br>能够坚持到收尾这一阶段，十有八九是计划成功了。所以，收尾往往也可以被称之为庆功。<br>在这一时刻，前面所许下的奖励或是惩罚，就要开始兑现了。但是相比较奖惩，对整个实现过程的回顾，可能会更加让我们心潮澎湃。原来，我们并不总是一事无成，如果方法得当，我们一样可以将计划执行的漂漂亮亮，不论是多么远大，多么艰苦的目标，原来都是真的可以做到的。<br>在这个阶段，并不是只能开香槟庆祝，我们仍然有很多事情可做。   </li>
<li>归纳整理<br>前文已经说过，大家克服万难，达成目标，价值最大的部分其实是整个执行的过程。我们一定有很多感慨想要述说出来，说给自己听也说给希望从中汲取经验的朋友们听。如果大家真的有记录计划实行的各个细节，这时候就可以派上用场了。只要稍加整理，就是一篇完整的真实故事。足以打动任何人，足以让任何人趋之若鹜，顶礼膜拜。任何人，也包括你自己。<br>我说的都是真的，不信，我们就来试试。    </li>
<li>分享展示<br>平时，我们时刻关注微博，朋友圈。我们看朋友们的兴趣生活，也展示着自己的日常起居。现在，我们有了足以秒杀鸡汤，自拍的话题内容，而且完全是自导自演，这才是真正值得在朋友圈中大肆炫耀的正能量。  </li>
</ol>
<h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>写到这里，我所总结的关于如何用互联网管理方式指导自身计划执行的方法，也就暂时完结了。<br>简单回顾一下，完整的过程大致如下：  </p>
<ol>
<li>启动阶段<br>明确自己的目标<br>必须实现的理由<br>客观分析，明确自身优劣<br>收集相关案例<br>落实成文字    </li>
<li>规划阶段<br>任务清单不要过长过多<br>任务要有能够量化的指标<br>任务执行的顺序和时间要经过深思熟虑<br>任务分解窑足够细化<br>总结和调整一定不能忽略    </li>
<li>执行阶段<br>能够时刻被提醒<br>营造竞争互助的环境氛围<br>维持关注度<br>频繁总结调整  </li>
<li>监督阶段<br>永不间断的提醒<br>执行过程要公开透明<br>频繁总结反馈  </li>
<li>收尾阶段<br>完整实施过程的总结整理<br>执行成果的分享展示  </li>
</ol>
<h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>其实我们都明白，无论多么先进的思想，如果空有想法不去实践，就回沦为纸上谈兵，终究还是无法起作用的。<br>接下来，我就要按照这个方法来具体实践。在实际应用中，去逐步的检验和完善这个方法。<br>从开篇的时候一直到现在，我始终在说，我有很多想要实现的事情，也制订了无数的计划，可惜都未能实现。也正是因为如此，我迫切的希望能够有办法帮助自己走出这样的一种窘境，所以我开始找寻并总结方法，也就有了这篇文章的产生。<br>回想起来，始于多年之前，今日仍然耿耿于怀的计划，还真是不少。按照上文所诉之法，想要成功，就一定要保证其公开透明，不能隐于自身。那么，我就在这里公布几个接下来要展开的计划。  </p>
<ol>
<li>写一本有关IT项目管理的书<br>工作多年，经历过多个项目，也感受过多钟不同的管理风格。但是，不论在哪个团队下，我始终觉着团队的项目管理方面仍然有着很大的提升空间。所以，我开始留意并学习一些项目管理方面的知识。知道了传统的IT项目管理，也明了了新兴的敏捷开发，还花大力气学习和使用了相关的项目管理工具。随着相关知识积累的越来越多，我开始有想法将自己的一些感触心得分享出来。所以就萌生了写一本介绍项目管理的书的打算。<br>这个想法已经存在了一两年的时间了，但是始终也未能真正展开。期间，不停的准备，不停的推翻原本的提纲。其实，说的不客气点，就是没能坚持下来。<br>现在，我不想继续这种遥遥无期的状态了。<br>可以透露一点的是，这本书是以小说的形式出现。情节设定大致是，一名项目经理在一家创业公司里带领团队，逐步战胜混乱，最终成功完成项目开发。    </li>
<li>参加工作六七年间的所见所感<br>转眼间，毕业后参加工作已经六七年了。这段时间里，在工作上，从什么都不懂的门外汉慢慢开始入门走入其中，经历过职业规划上的迷茫困惑，也感受过失意无助。走出校园，步入社会，诸多不适，曾经有一段时间里，我特别希望能够有人坐到我的旁边来告诉我如何才能更好的适应工作，有哪些需要我格外注意，有哪些可以不去关注。我知道很多朋友们会同我一样，特别是那些毕业不久的朋友们，可能也会很希望能够得到这方面的咨询帮助。<br>到了现在，那些曾经存在的困苦已经慢慢转移，但是我又有了新的苦恼。刚刚参加工作，我对领导上级言听计从，对一切制度现象深信不疑，如今，随着工作经验的增多，开始变得对任何方案做法都抱有怀疑。对于很多现象，我能够理解，但是却无法接受。于它们，我其实有很多话想说。<br>很长时间以来，我都很希望能够将工作后这些年来的所见所感，心得体会写一写，一方面证明自己没有虚度这些岁月，一方面又能够给很多人以借鉴。  </li>
<li>收集整理科学的管理方法，归纳成我的理论体系，开发出相对应的软件工具，并推广到生活的方方面面<br>因为我是程序员出身，一有想法，就希望能够通过技术的手段将其实现出来，变成一个能够被广泛使用的产品。<br>关于如何成功的完成自己的计划，学习了这么多，总结了这么多，也写了这么多，更多的还是希望他能够变得对我们有帮助。想要达到这样的目标，在我看来，有两方面可做，一是能够将其整理成为我自己的体系，一是能够将其开发成产品。<br>这个想法一直都在坚持，从我踏上程序员这条路的时候就已经在准备，从我开始学习和整理相关的知识方法的时候我同样在准备，现在这种准备仍然在继续，但是也到了需要将其变成现实的时候了。<br>在接下来的日子里，我会一边继续总结我的体系和方法，用这些方法来指导自己具体的实施，在不断的检验实践中验证和完善它，在完善的差不多的时候，就开始抽象成产品原型，分阶段的实现它们。  </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;又到了一年之计的春天，又到了展望新的一年的时候。可惜回首望去，却发现去年的，前年的，乃至很多年前的计划还静静躺倒在未完成的清单上。&lt;br&gt;我其实是一个特别喜欢列计划的人，从上初中那时候开始，我就喜欢拿支笔在笔记本上一笔一画的写下近一阶段所要完成的计划，即使是到今天，我仍然要
    
    </summary>
    
    
      <category term="心得感悟" scheme="http://azonwan.github.io/tags/%E5%BF%83%E5%BE%97%E6%84%9F%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>为什么叫萍聚萍汇</title>
    <link href="http://azonwan.github.io/2017-08-02-2015-12-20-why_named_pingju.md"/>
    <id>http://azonwan.github.io/2017-08-02-2015-12-20-why_named_pingju.md</id>
    <published>2017-08-02T09:32:48.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>此时此刻，萍聚萍汇这个社区站点终于差不多算是搭建完成，可以正式上线运营了。虽然还是遗留了很多功能上的缺陷和问题，但这仍然是一个值得庆贺的时刻。尤其对我自己来说，更是如此。<br>创建一个产品，能够为自己，也为广大朋友们，提供一个可以正视自身缺陷，能够得到大家的监督帮助的场所，在这里我们一起努力，互助互惠，最终找到一种科学有效的管理方法并用之来解决生活或是工作中困难，逐步走向一种成功的。这是我多年来一直在找寻的产品，也是我始终追求的梦想。<br>我希望萍聚萍汇这个产品，能够最终成为我内心中所追求的这样的一个产品。<br>可能朋友们会问，为什么要叫“萍聚萍汇”。这个名字到底有什么寓意呢？<br>这里的“萍”，表意是“浮萍”。提到浮萍，大家想到的是一种怎样的画面呢？<br>浮萍飘泊本无根,天涯游子君莫问<br>残雪凝辉冷画屏,落梅横笛已三更<br>更无人处月胧明,我是人间惆怅客<br>知君何事泪纵横,断肠声里忆平生    </p>
<p>浮萍，是一种生长在水面上的漂浮植物。因为它没有根，一种居无定所的漂泊感油然而生；因为它没有根，不知前方何处的茫然也随之而来。<br>可能这正是大多数现代人的真实感受。多数情况下，大家都沉浸在一种孤独，失败，茫然，困惑中苦苦挣扎。大家都在说要把人生掌握在自己的手里，但实际情况却往往是被现实反制。可能我们一生中会做很多非做不可的计划，也曾为此不眠不休的奋斗，但是最终却总离成功咫尺天涯。为什么呢？我们会甘心么？不，我们一定不甘心。<br>一个人的力量毕竟有限，想要做成一件事情，需要各方各面的帮助。就像是一叶浮萍，孤单单的漂泊在水面上，一定是随波逐流，茫然无知前方在哪里。但是如果很多浮萍聚集汇聚在一起，在水面上连成一片，那种孤独无助就一定会缓解。<br>这就是我要做萍聚萍汇的目的。我希望通过这个产品，能够给那些不甘于生活现状，想要改变自己的朋友们提供一个平台。大家一边可以分享自己的知识能力，一边可以在这里找到解决问题的方法思想，大家互助互惠，共同进步。把大家的力量汇聚在一起，从此有一个不一样的活法。<br>萍聚萍汇，即是一种愿望，也是一种态度。它能走到哪里，需要我们大家共同的努力。我在这里等着大家。欢迎大家参与进来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此时此刻，萍聚萍汇这个社区站点终于差不多算是搭建完成，可以正式上线运营了。虽然还是遗留了很多功能上的缺陷和问题，但这仍然是一个值得庆贺的时刻。尤其对我自己来说，更是如此。&lt;br&gt;创建一个产品，能够为自己，也为广大朋友们，提供一个可以正视自身缺陷，能够得到大家的监督帮助的场所
    
    </summary>
    
      <category term="计划实施" scheme="http://azonwan.github.io/categories/%E8%AE%A1%E5%88%92%E5%AE%9E%E6%96%BD/"/>
    
    
      <category term="萍聚萍汇" scheme="http://azonwan.github.io/tags/%E8%90%8D%E8%81%9A%E8%90%8D%E6%B1%87/"/>
    
  </entry>
  
  <entry>
    <title>help_to_use_pingju</title>
    <link href="http://azonwan.github.io/2017-08-02-2015-12-20-help_to_use_pingju.md"/>
    <id>http://azonwan.github.io/2017-08-02-2015-12-20-help_to_use_pingju.md</id>
    <published>2017-08-02T09:32:48.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>团队建设</title>
    <link href="http://azonwan.github.io/2017-08-02-2015-12-06-team.md"/>
    <id>http://azonwan.github.io/2017-08-02-2015-12-06-team.md</id>
    <published>2017-08-02T09:32:48.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>团队建设并不是一件简单的事情，想要让团队达到预期的要求，其实涉及到了方方面面的因素。<br>也正因为如此，这个领域里衍生出了很多的学说，理论，模型，指南，运用这些知识可以在很大程度上帮助我们打造出一个有战斗力的团队来。<br>下面，我就介绍一些我对此的一些想法和观点。</p>
<h3 id="建设"><a href="#建设" class="headerlink" title="建设"></a>建设</h3><h4 id="招聘"><a href="#招聘" class="headerlink" title="招聘"></a>招聘</h4><p>团队建设起始于人员招聘。那么，在招人这件事情上有哪些是需要我们注意的呢。比如，我们要招聘一个PHP开发工程师，我认为以下几个方面是比较重要的。   </p>
<ol>
<li>团队协作<br>新加入的团队成员必须要能够适合当前已有的团队。团队，并不只是在一起工作的一群人，大家必须能够相互支持，相互帮助，相互理解，相互信任。  </li>
<li>开发能力<br>他必须能够具备开发的能力。意味着，他必须了解代码标准，代码整洁，开发原则，设计模式，架构模式，编写代码的能力等。这些知识对于任何一门开发语言都是适用的，所以，即使我们为了一个PHP职位招聘了一个JAVA语言开发者，只要他能够了解以上这些方面，他仍然能够很好的适应新的工作岗位。    </li>
<li>开发语言相关能力<br>当然了，我们要招聘一名PHP开发者，他还是需要具备PHP语言的开发能力的。这个标准很大程度上要根据他应聘的岗位(初级，中级，高级，架构师…)来确定.他的学习背景，工作背景，是否拥有某些认证考试的证书对我们来说是一种参考，并不能作为全部的考核标准。    </li>
<li>开发工具<br>开发者在什么环境(IDE，操作系统，虚拟环境)下进行开发，并不应该成为一个应聘者应聘成功还是失败的标准。相反，能够使用多种开发工具或者开发环境，应该是一个优势。    </li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;团队建设并不是一件简单的事情，想要让团队达到预期的要求，其实涉及到了方方面面的因素。&lt;br&gt;也正因为如此，这个领域里衍生出了很多的学说，理论，模型，指南，运用这些知识可以在很大程度上帮助我们打造出一个有战斗力的团队来。&lt;br&gt;下面，我就介绍一些我对此的一些想法和观点。&lt;/p
    
    </summary>
    
      <category term="关注兴趣" scheme="http://azonwan.github.io/categories/%E5%85%B3%E6%B3%A8%E5%85%B4%E8%B6%A3/"/>
    
    
      <category term="项目管理 团队" scheme="http://azonwan.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86-%E5%9B%A2%E9%98%9F/"/>
    
  </entry>
  
  <entry>
    <title>how_create_pingju</title>
    <link href="http://azonwan.github.io/2017-08-02-2015-12-20-how_create_pingju.md"/>
    <id>http://azonwan.github.io/2017-08-02-2015-12-20-how_create_pingju.md</id>
    <published>2017-08-02T09:32:48.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://azonwan.github.io/2017-08-01-hello-world.md"/>
    <id>http://azonwan.github.io/2017-08-01-hello-world.md</id>
    <published>2017-08-01T09:43:01.000Z</published>
    <updated>2017-08-01T09:43:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>项目管理计划</title>
    <link href="http://azonwan.github.io/2015-11-30-2015-11-30-project-manager.md"/>
    <id>http://azonwan.github.io/2015-11-30-2015-11-30-project-manager.md</id>
    <published>2015-11-29T16:00:00.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>一直以来，我都想做一个项目管理方面的专题。</p>
<p>自我参加工作开始，我一直混迹于互联网领域。辗转漂泊，这些年也更换了几次工作，在不同的公司里，感受着不同的管理文化。在吸收它们管理精华的同时，也承受着诸多不合理管理模式所带来的痛苦。每当我看到同事们在私下里对混乱低效的工作状态怨声载道，表达不满的时候，我心里都在思考，这种种不合理的方式难道就没有一个好的解决方法去应对么。</p>
<p>随着工作时间的增多，我也开始走上了管理岗位。在这些年的学习和实践中，我被人管理也管理过别人，深切的感受到管理的重要性。如果能有一个好的管理思想，并能够很好的执行下去，整个部门的工作效率会成倍提高，反之，整个团队就根本感受不到任何激情和效率。虽然每一个公司都在倡导管理的重要性，但是实事求是的讲，真正在管理方面做的突出的公司或者部门，在国内其实并不多。</p>
<p>这是一个很不合理的现象，为什么大家都知道管理很重要，应该好好管，市面上也充斥着各种各样的管理理论，但实施的效果却始终达不倒预期效果呢。究其原因，无非就是两句话，方法不对，贯彻不力。   </p>
<p>这些年来，我越发的感觉到管理对于一个企业，对于一个团队，甚至对于个人，都是一件多么值得关注的方面。在这段时间里，我也慢慢开始思考，慢慢开始总结自己对于管理的一些理解。    </p>
<p>在这里，我想逐步的把我这些年的感触以及学习到的管理思想分享出来。希望能够对大家有所帮助，也对自己有所促进。</p>
<p>这是一件伟大的事情，是一件值得自己全身心投入并坚持到底的事情。</p>
<p>为了能够实现这个目标，我先在这里进行一下规划。按照项目管理思想，想要完成一个项目，需要经历五大步骤，启动，规划，执行，监督和收尾。此时，此刻，就是一个启动的过程。</p>
<p>为此，我会运营一个网站，专门收集整理项目管理思想。并供自己以及大家共同学习讨论。    </p>
<p>在这个网站里，除了介绍讨论各种项目管理思想之外，我还会结合亲身经历，将自己这些年来沉淀在自己心中的关于管理的一些想法逐步的分享出来。希望能够给大家带来帮助。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一直以来，我都想做一个项目管理方面的专题。&lt;/p&gt;
&lt;p&gt;自我参加工作开始，我一直混迹于互联网领域。辗转漂泊，这些年也更换了几次工作，在不同的公司里，感受着不同的管理文化。在吸收它们管理精华的同时，也承受着诸多不合理管理模式所带来的痛苦。每当我看到同事们在私下里对混乱低效的
    
    </summary>
    
      <category term="计划实施" scheme="http://azonwan.github.io/categories/%E8%AE%A1%E5%88%92%E5%AE%9E%E6%96%BD/"/>
    
    
      <category term="计划 项目管理" scheme="http://azonwan.github.io/tags/%E8%AE%A1%E5%88%92-%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>一页纸项目管理</title>
    <link href="http://azonwan.github.io/2015-11-30-2015-11-30-onepage.md"/>
    <id>http://azonwan.github.io/2015-11-30-2015-11-30-onepage.md</id>
    <published>2015-11-29T16:00:00.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先，我要先来介绍一个简单实用的项目管理方法。一页纸项目管理。    </p>
<p>一页纸项目管理是为高层管理者准备的一种工具或者说是一份报告。一页纸项目管理用图表和色彩将项目用高度可视的连续画面描绘出来。绿色表示顺利、红色表示超出时间或预算、黄色表示模棱两可。它将庞大复杂的项目在一页纸上简洁明了地完美体现，算得上是世界上最简单实用的管理手册之一了。     </p>
<p>一页纸项目管理的方法非常简单，简单到只应用excel就可以完全实现。它的表现形式就是excel制作的一张表格，在表格里的对应位置管理项目中的各项内容。包括项目目标，项目分解，项目负责人，项目实现情况，项目风险分析，项目的总结等等。它主要使用图表和色彩将项目用高度可视的连续画面描绘出来。绿色表示顺利、红色表示超出时间或预算、黄色表示模棱两可。当我们通过这种管理方法进行项目管理的时候，我们会不自觉的感叹，项目管理原来也可以这么简单，还这么的清晰有序。    </p>
<p>下面，我们来具体的介绍一页纸管理的方法。   </p>
<ol>
<li>打开excel表格，做好一页纸项目管理模版。<br><img src="/album/pm/onepage_1.jpg" alt="">    </li>
<li>填写责任人<br><img src="/album/pm/onepage_2.jpg" alt="">    </li>
<li>填写项目矩阵。包括项目目标，项目分解，目标排期，成本描述<br><img src="/album/pm/onepage_3.jpg" alt="">   </li>
<li>描述项目目标<br><img src="/album/pm/onepage_4.jpg" alt="">   </li>
<li>填写主要任务<br><img src="/album/pm/onepage_5.jpg" alt="">   </li>
<li>使目标与任务一致<br><img src="/album/pm/onepage_6.jpg" alt=""></li>
<li>确定项目目标<br><img src="/album/pm/onepage_7.jpg" alt=""></li>
<li>使任务和时间线一致<br><img src="/album/pm/onepage_8.jpg" alt="">   </li>
<li>将任务分配给负责人<br><img src="/album/pm/onepage_9.jpg" alt=""></li>
<li>填写任务<br><img src="/album/pm/onepage_10.jpg" alt=""></li>
<li>写明项目成本<br><img src="/album/pm/onepage_11.jpg" alt="">  </li>
<li>进行项目概述和预测<br><img src="/album/pm/onepage_12.jpg" alt=""></li>
<li>执行过程中进行过程标注<br><img src="/album/pm/onepage_13.jpg" alt="">  </li>
<li>使用不同颜色标注成本<br><img src="/album/pm/onepage_14.jpg" alt=""></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，我要先来介绍一个简单实用的项目管理方法。一页纸项目管理。    &lt;/p&gt;
&lt;p&gt;一页纸项目管理是为高层管理者准备的一种工具或者说是一份报告。一页纸项目管理用图表和色彩将项目用高度可视的连续画面描绘出来。绿色表示顺利、红色表示超出时间或预算、黄色表示模棱两可。它将庞大复
    
    </summary>
    
      <category term="技术积累" scheme="http://azonwan.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="项目管理" scheme="http://azonwan.github.io/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>web开发的10个常见错误</title>
    <link href="http://azonwan.github.io/2015-09-14-2015-09-14-10-common-web-developer-mistakes.md"/>
    <id>http://azonwan.github.io/2015-09-14-2015-09-14-10-common-web-developer-mistakes.md</id>
    <published>2015-09-14T09:15:00.000Z</published>
    <updated>2017-08-02T09:32:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一个web开发人员，我们往往穿梭于各种各样的需求开发之中。写过很多代码，做过很多功能。写的多了，很容易形成一种习惯。这些开发习惯有些是好的，但也有很多是需要杜绝的。</p>
<p>今天在网上看到了<a href="http://code.tutsplus.com/articles/10-common-web-developer-mistakes--cms-24791" target="_blank" rel="external">一篇文章</a>，名字是”10 Common Web Developer Mistakes”.</p>
<p>我觉着写的特别有道理，很有借鉴意义，就转载一下。由于原文是用英文书写的，在转载的时候，把它们进行了简单的翻译。</p>
<p>在这篇文章中，作者分享了在他看来，web程序员容易产生的10个问题。排名不分先后。</p>
<p>1.常用过时的HTML</p>
<p>现象： 很多前端开发人员，仍然习惯使用互联网早期阶段常用的HTML标签。比如使用<code>&lt;table&gt;</code>作页面布局，习惯使用用<code>&lt;span&gt;</code>,<code>&lt;div&gt;</code>而不是其他更合适的语义化的标签。此外，还喜欢使用一些在现今HTML标准中已经不再支持的旧版标签，比如<code>&lt;center&gt;</code>,<code>&lt;font&gt;</code>等。</p>
<p>影响：这些老式的有些过时的写法很容易引起不同浏览器间呈现效果的不一致性。而且，在现今<a href="http://blogs.msdn.com/b/ie/archive/2015/02/26/a-break-from-the-past-the-birth-of-microsoft-s-new-web-rendering-engine.aspx/?WT.mc_id=14135-DEV-tuts-article26" target="_blank" rel="external">主流的浏览器</a>里，这些以前常用的写法已经变得不再必要。</p>
<p>如何避免： 停止使用<code>&lt;table&gt;</code>标签进行页面布局。多了解一些如今流行的常用的写法,可参考<a href="https://html.spec.whatwg.org/multipage/semantics.html#semantics" target="_blank" rel="external">whatwg.org</a>.</p>
<p>2.在我的浏览器是没有问题的啊…</p>
<p>现象： 一些前端开发人员可能会有自己所偏爱的浏览器或者是讨厌的浏览器。开发出来的功能可能会主要用这个浏览器中进行测试，也或许会故意忽略这个浏览器。这样的情况就很容易引起，同样一段代码在这个浏览器里正常运行，但是在其他浏览器里就莫名错乱。</p>
<p>影响： 只关注自己常用的浏览器，很容易引起其他浏览器中效果的错乱。</p>
<p>如何避免：在开发中，对每一个浏览器及每一个版本都进行测试是不现实的。但是，检查特定类别的浏览器中的显示情况是一个比较可取的方法。现今，我们其实可以找到很多免费的工具，比如<a href="http://dev.modern.ie/tools/vms/?utm_source=Tuts&amp;utm_medium=article26&amp;utm_campaign=Tuts" target="_blank" rel="external">free VMS</a>,<a href="http://dev.modern.ie/tools/staticscan/?utm_source=Tuts&amp;utm_medium=article26&amp;utm_campaign=Tuts" target="_blank" rel="external">site scanners</a>.诸如<a href="http://browsershots.org/" target="_blank" rel="external">Browsershots</a>,<a href="https://www.browserstack.com/" target="_blank" rel="external">BrowserStack</a>这些网址，可以针对我们所提供的页面地址生成一个在各浏览器下的运行快照。</p>
<p>3.不做数据验证</p>
<p>现象：在一个表单输入的功能中，我们会给用户提供特定的提示信息（如不能为空，必须为数字…），并且相信用户一定会按照我们所提供的提示那样去操作。</p>
<p>影响：很多情况下，得到的结果可能并不会按照我们所想象的那样发展。如果我们不做相应的验证，在不能为空的程序中很可能会接收到一个空参数，从而导致程序报错甚至崩溃掉。更严重的是，我们会面临着数据库注入攻击，造成项目的安全性问题。</p>
<p>如何避免：最直接有效的建议是确保每一个接收到的数据都是干净可用的。而且，不管在客户端是否对数据进行了验证，在服务器端同样也要做相应的验证判断。</p>
<p>4.过大的响应请求</p>
<p>现象： 现在的很多页面上，为了保证展示效果，会放置很多图片。这些图片本身可能会很大，我们会通过<code>&lt;img&gt;</code>标签去设置它的width和height。虽然看起来图片变小了，但它实际的大小并没有发生改变。此外，页面中引入的css文件或者js文件可能也会很大，这样就会导致这个页面的源文件会变的无比巨大。</p>
<p>影响： 页面过大，会加长页面的打开时间。轻则让用户失去耐心，重则会导致页面因为页面超时而产生错误。</p>
<p>如何避免：不要接受这种观点，现在的网速越来越快，页面源文件大一点也没关系。在开发过程中，我们要假设自己还是在网速缓慢对网上请求大小要求苛刻的时代。如果想要减少页面文件的大小，可以通过以下几个方面进行考虑。<br>  不时问自己，页面上的这些图片是不是真的都有必要显示。答案如果是否定的，就去处掉那些无用的图片。我们可以通过<a href="http://dev.modern.ie/tools/staticscan/?utm_source=Tuts&amp;utm_medium=article26&amp;utm_campaign=Tuts" target="_blank" rel="external">查看你的页面</a>来找寻减少图片大小的建议。<br>  可以通过工具来压缩图片，比如<a href="http://toki-woki.net/p/Shrink-O-Matic/" target="_blank" rel="external">Shrink O’Matic</a>和<a href="http://luci.criosweb.ro/riot/" target="_blank" rel="external">RIOT</a>.<br>  预加载图片。这种方法并不会减少页面的大小，但是可以让其他需要调用本页面中图片的页面可以快速的打开。具体方法，可以参见<a href="https://perishablepress.com/3-ways-preload-images-css-javascript-ajax/" target="_blank" rel="external">这篇文章</a>.</p>
<p>其他方法，可以通过压缩css，js文件来实现。可用工具有<a href="http://www.minifycss.com/" target="_blank" rel="external">Minify Css</a>和<a href="http://www.minifyjs.com/" target="_blank" rel="external">Minify Js</a>.</p>
<p>5.代码能运行就行了</p>
<p>现象：不管是js还是后端的程序编码，开发人员确定这是可运行的代码，因此就断定它在部署到生产环境中也一样可以正常运行。代码在运行过程中也没有相应的错误提示，只因为这是程序员已经确认过的代码。</p>
<p>影响：页面如果没有一个错误处理机制，在真正报错的时候就会以一种十分丑陋的形式展现出来。很可能就是这样的<br><img src="/album/error/nginx-error.png" alt=""><br>不光用户体验不好，而且还会暴露出很多服务器信息，造成安全隐患。</p>
<p>如何避免：要有人性化的错误提示页面，不要将代码信息展示出来。即使是javascript，也要想办法抓住错误而不是任由它报错。而服务器端的代码报错，需要将报错抓住，并将错误产生的原因以一种友好的形式提供到类似<a href="http://en.wikipedia.org/wiki/HTTP_404" target="_blank" rel="external">HTTP 404s</a>这样的页面中。</p>
<p>6.编写fork代码</p>
<p>现象：比如说在代码中希望兼容所有的浏览器和对应版本，开发人员在代码中写出多种分支，针对每一种情况都进行了处理。这样的代码可能会存在无数个<code>if</code>语句。代码看起来会混乱非常，交叉在一起。</p>
<p>影响：如果浏览器更新了新版本，我们就不得不对其进行对应的处理。代码文件会渐渐变得异常庞大，同时也加重了代码维护的难度。</p>
<p>如何避免：针对特征去分别处理的方法会很大程度上减少代码量，而且也会让代码变的易读易维护。强烈建议使用一些类似于<a href="http://modernizr.com/" target="_blank" rel="external">Modernizr</a>的库，既可以帮助我们快速找出版本特性，又可以自动的根据浏览器版本提供对应的代码方法。</p>
<p>7.非响应式设计</p>
<p>现象：在网页设计的过程中，假设所有的页面都是固定大小的。</p>
<p>影响：在移动设备或者是一些大屏设备上查看我们所设计的页面，用户体验会变的十分糟糕。某些特效可能无法展现，页面的正常样式可能也会受到影响。</p>
<p>如何避免：在网页设计开发的时候使用响应式设计。关于这个主题，我们可以参考<a href="https://msdn.microsoft.com/en-us/magazine/hh653584.aspx/?WT.mc_id=14135-DEV-tuts-article26" target="_blank" rel="external">这些教程</a>。这里要推荐一个十分受欢迎的框架<a href="http://getbootstrap.com/" target="_blank" rel="external">Boostrap</a>.</p>
<p>8.制作无意义的页面</p>
<p>现象：我们会在页面上填充各种各样的内容来吸引用户，但是却不对搜索引擎提供任何的提示。</p>
<p>影响：我们提供的页面将不会被搜索引擎收录，因此也很有可能会得不到或者是得到很少的用户访问量。即使页面上的内容再吸引人，它仍然得不到用户的关注。</p>
<p>如何避免：多做一些SEO方面的优化。确保在页面的头信息中增加<code>&lt;meta&gt;</code>标签，并填进去有意义的关键词(keywords)和描述(description)。这里推荐一个好的教程<a href="http://webdesign.about.com/od/seo/a/keywords-html.htm" target="_blank" rel="external">About Tech</a>.</p>
<p>9.页面中过多的刷新操作</p>
<p>现象：在页面中，每一个操作都需要刷新页面。</p>
<p>影响：同问题4相似，过多的刷新会导致页面的性能降低，用户体验同样会变的很差。</p>
<p>如何避免：一个快速有效的方法是采用异步调用的方式。可以使用Ajax技术，也可以使用<a href="https://en.wikipedia.org/wiki/Single-page_application" target="_blank" rel="external">单页面应用</a>(SPA)的方式。使用受欢迎的框架也是不错的选择，比如JQuery,Angular JS.</p>
<p>10.自己亲自做的太多</p>
<p>现象: 我们花费大量时间去实现网页上的功能，很多工作都是在重复性的进行着，同一个变量，同一个函数,我们要一遍一遍的编写，简单的打字写字母耗散了我们过多的精力。</p>
<p>影响： 构建网站新页面以及随后进行的优化升级所花费的时间过于冗长。尤其是当其他开发人员在快速完成这些事情的时候，自己的效率就会显得尤为低下。纯手动的书写，通常还会带来很多认为的拼写错误。</p>
<p>如何避免：工欲善其事，必先利其器。为了解决这个问题，我们可以使用一些流行的开发工具，比如Sublime Text,Netbeans,PhpStorm.<br>我们还可以使用一些自动部署工具来提高我们的开发效率。比如使用<a href="http://gruntjs.com/" target="_blank" rel="external">Grun</a>来部署和压缩静态文件，可以使用<a href="http://bower.io/" target="_blank" rel="external">Bower</a>来管理我们的框架。</p>
<p>总结：    </p>
<p>通过了解这些常见的开发错误，我们可以避免很多别人已经犯过的错误，让开发变的更为简单高效。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一个web开发人员，我们往往穿梭于各种各样的需求开发之中。写过很多代码，做过很多功能。写的多了，很容易形成一种习惯。这些开发习惯有些是好的，但也有很多是需要杜绝的。&lt;/p&gt;
&lt;p&gt;今天在网上看到了&lt;a href=&quot;http://code.tutsplus.com/art
    
    </summary>
    
      <category term="技术积累" scheme="http://azonwan.github.io/categories/%E6%8A%80%E6%9C%AF%E7%A7%AF%E7%B4%AF/"/>
    
    
      <category term="web 开发" scheme="http://azonwan.github.io/tags/web-%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
</feed>
